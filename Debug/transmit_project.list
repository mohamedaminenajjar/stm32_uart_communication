
transmit_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003294  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003424  08003424  00013424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003474  08003474  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003474  08003474  00013474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800347c  0800347c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800347c  0800347c  0001347c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003480  08003480  00013480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000210  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000026c  2000026c  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000883b  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000162d  00000000  00000000  0002890a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000738  00000000  00000000  00029f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000584  00000000  00000000  0002a670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021455  00000000  00000000  0002abf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000097b1  00000000  00000000  0004c049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cecaf  00000000  00000000  000557fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000021bc  00000000  00000000  001244ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00126668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800340c 	.word	0x0800340c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800340c 	.word	0x0800340c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fafc 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f838 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f91c 	bl	80007b4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800057c:	f000 f89e 	bl	80006bc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000580:	f000 f8ee 	bl	8000760 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if( 1 == ButtonFlag)
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <main+0x64>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d1fb      	bne.n	8000584 <main+0x18>
	  {
		  HAL_ADC_Start(&hadc1);
 800058c:	4811      	ldr	r0, [pc, #68]	; (80005d4 <main+0x68>)
 800058e:	f000 fba3 	bl	8000cd8 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, ADC_TIMEOUT);
 8000592:	2101      	movs	r1, #1
 8000594:	480f      	ldr	r0, [pc, #60]	; (80005d4 <main+0x68>)
 8000596:	f000 fca4 	bl	8000ee2 <HAL_ADC_PollForConversion>
		  HAL_ADC_Stop(&hadc1);
 800059a:	480e      	ldr	r0, [pc, #56]	; (80005d4 <main+0x68>)
 800059c:	f000 fc6e 	bl	8000e7c <HAL_ADC_Stop>
		  AdcValue = HAL_ADC_GetValue(&hadc1);
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <main+0x68>)
 80005a2:	f000 fd29 	bl	8000ff8 <HAL_ADC_GetValue>
 80005a6:	4603      	mov	r3, r0
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <main+0x6c>)
 80005ac:	801a      	strh	r2, [r3, #0]
		  sprintf(StringToTransmited, "%d", AdcValue);
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <main+0x6c>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	461a      	mov	r2, r3
 80005b4:	4909      	ldr	r1, [pc, #36]	; (80005dc <main+0x70>)
 80005b6:	480a      	ldr	r0, [pc, #40]	; (80005e0 <main+0x74>)
 80005b8:	f002 fa84 	bl	8002ac4 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t *) StringToTransmited, 2, UART_TIMEOUT);
 80005bc:	2301      	movs	r3, #1
 80005be:	2202      	movs	r2, #2
 80005c0:	4907      	ldr	r1, [pc, #28]	; (80005e0 <main+0x74>)
 80005c2:	4808      	ldr	r0, [pc, #32]	; (80005e4 <main+0x78>)
 80005c4:	f001 ff09 	bl	80023da <HAL_UART_Transmit>
		  ButtonFlag = 0;
 80005c8:	4b01      	ldr	r3, [pc, #4]	; (80005d0 <main+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]
	  if( 1 == ButtonFlag)
 80005ce:	e7d9      	b.n	8000584 <main+0x18>
 80005d0:	20000118 	.word	0x20000118
 80005d4:	20000078 	.word	0x20000078
 80005d8:	20000104 	.word	0x20000104
 80005dc:	08003424 	.word	0x08003424
 80005e0:	20000108 	.word	0x20000108
 80005e4:	200000c0 	.word	0x200000c0

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	; 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fa84 	bl	8002b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	; (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	; 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800065c:	2340      	movs	r3, #64	; 0x40
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000664:	2307      	movs	r3, #7
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f001 f9cf 	bl	8001a10 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000678:	f000 f91a 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2302      	movs	r3, #2
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2102      	movs	r1, #2
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fc30 	bl	8001f00 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006a6:	f000 f903 	bl	80008b0 <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ce:	4b21      	ldr	r3, [pc, #132]	; (8000754 <MX_ADC1_Init+0x98>)
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <MX_ADC1_Init+0x9c>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <MX_ADC1_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006da:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_ADC1_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_ADC1_Init+0x98>)
 80006fc:	4a17      	ldr	r2, [pc, #92]	; (800075c <MX_ADC1_Init+0xa0>)
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_ADC1_Init+0x98>)
 8000708:	2201      	movs	r2, #1
 800070a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_ADC1_Init+0x98>)
 8000716:	2201      	movs	r2, #1
 8000718:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800071a:	480e      	ldr	r0, [pc, #56]	; (8000754 <MX_ADC1_Init+0x98>)
 800071c:	f000 fa98 	bl	8000c50 <HAL_ADC_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000726:	f000 f8c3 	bl	80008b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800072a:	2301      	movs	r3, #1
 800072c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800072e:	2301      	movs	r3, #1
 8000730:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	; (8000754 <MX_ADC1_Init+0x98>)
 800073c:	f000 fc6a 	bl	8001014 <HAL_ADC_ConfigChannel>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000746:	f000 f8b3 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000078 	.word	0x20000078
 8000758:	40012000 	.word	0x40012000
 800075c:	0f000001 	.word	0x0f000001

08000760 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_USART1_UART_Init+0x50>)
 8000768:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 800076c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000770:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART1_UART_Init+0x4c>)
 8000798:	f001 fdd2 	bl	8002340 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007a2:	f000 f885 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	200000c0 	.word	0x200000c0
 80007b0:	40011000 	.word	0x40011000

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <MX_GPIO_Init+0xc8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a2a      	ldr	r2, [pc, #168]	; (800087c <MX_GPIO_Init+0xc8>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b28      	ldr	r3, [pc, #160]	; (800087c <MX_GPIO_Init+0xc8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <MX_GPIO_Init+0xc8>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a23      	ldr	r2, [pc, #140]	; (800087c <MX_GPIO_Init+0xc8>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_GPIO_Init+0xc8>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_GPIO_Init+0xc8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a1c      	ldr	r2, [pc, #112]	; (800087c <MX_GPIO_Init+0xc8>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_GPIO_Init+0xc8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000824:	4816      	ldr	r0, [pc, #88]	; (8000880 <MX_GPIO_Init+0xcc>)
 8000826:	f001 f8c1 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800082a:	2301      	movs	r3, #1
 800082c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	4619      	mov	r1, r3
 800083e:	4811      	ldr	r0, [pc, #68]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000840:	f000 ff18 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000848:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	4619      	mov	r1, r3
 800085c:	4808      	ldr	r0, [pc, #32]	; (8000880 <MX_GPIO_Init+0xcc>)
 800085e:	f000 ff09 	bl	8001674 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	2006      	movs	r0, #6
 8000868:	f000 fecd 	bl	8001606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800086c:	2006      	movs	r0, #6
 800086e:	f000 fee6 	bl	800163e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000872:	bf00      	nop
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800
 8000880:	40020c00 	.word	0x40020c00
 8000884:	40020000 	.word	0x40020000

08000888 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
 ++ButtonFlag;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_GPIO_EXTI_Callback+0x24>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	3301      	adds	r3, #1
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4b04      	ldr	r3, [pc, #16]	; (80008ac <HAL_GPIO_EXTI_Callback+0x24>)
 800089c:	701a      	strb	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000118 	.word	0x20000118

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <HAL_MspInit+0x4c>)
 80008cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d0:	6453      	str	r3, [r2, #68]	; 0x44
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_MspInit+0x4c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008fa:	2007      	movs	r0, #7
 80008fc:	f000 fe78 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a17      	ldr	r2, [pc, #92]	; (8000988 <HAL_ADC_MspInit+0x7c>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d127      	bne.n	800097e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <HAL_ADC_MspInit+0x80>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a15      	ldr	r2, [pc, #84]	; (800098c <HAL_ADC_MspInit+0x80>)
 8000938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <HAL_ADC_MspInit+0x80>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_ADC_MspInit+0x80>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_ADC_MspInit+0x80>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_ADC_MspInit+0x80>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000966:	2302      	movs	r3, #2
 8000968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096a:	2303      	movs	r3, #3
 800096c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <HAL_ADC_MspInit+0x84>)
 800097a:	f000 fe7b 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800097e:	bf00      	nop
 8000980:	3728      	adds	r7, #40	; 0x28
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40012000 	.word	0x40012000
 800098c:	40023800 	.word	0x40023800
 8000990:	40020000 	.word	0x40020000

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	; 0x28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a19      	ldr	r2, [pc, #100]	; (8000a18 <HAL_UART_MspInit+0x84>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d12c      	bne.n	8000a10 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	6453      	str	r3, [r2, #68]	; 0x44
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_UART_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a00:	2307      	movs	r3, #7
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <HAL_UART_MspInit+0x8c>)
 8000a0c:	f000 fe32 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a10:	bf00      	nop
 8000a12:	3728      	adds	r7, #40	; 0x28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40011000 	.word	0x40011000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020000 	.word	0x40020000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a70:	f000 f8ce 	bl	8000c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f000 ffaf 	bl	80019e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a90:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <_sbrk+0x5c>)
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <_sbrk+0x60>)
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d102      	bne.n	8000aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <_sbrk+0x64>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <_sbrk+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d207      	bcs.n	8000ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab8:	f002 f82c 	bl	8002b14 <__errno>
 8000abc:	4603      	mov	r3, r0
 8000abe:	220c      	movs	r2, #12
 8000ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac6:	e009      	b.n	8000adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ace:	4b07      	ldr	r3, [pc, #28]	; (8000aec <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <_sbrk+0x64>)
 8000ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ada:	68fb      	ldr	r3, [r7, #12]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3718      	adds	r7, #24
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20020000 	.word	0x20020000
 8000ae8:	00000400 	.word	0x00000400
 8000aec:	2000011c 	.word	0x2000011c
 8000af0:	20000270 	.word	0x20000270

08000af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <SystemInit+0x20>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <SystemInit+0x20>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b1c:	480d      	ldr	r0, [pc, #52]	; (8000b54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b1e:	490e      	ldr	r1, [pc, #56]	; (8000b58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b20:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b34:	4c0b      	ldr	r4, [pc, #44]	; (8000b64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b42:	f7ff ffd7 	bl	8000af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b46:	f001 ffeb 	bl	8002b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4a:	f7ff fd0f 	bl	800056c <main>
  bx  lr    
 8000b4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b5c:	08003484 	.word	0x08003484
  ldr r2, =_sbss
 8000b60:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b64:	2000026c 	.word	0x2000026c

08000b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC_IRQHandler>
	...

08000b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b70:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <HAL_Init+0x40>)
 8000b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_Init+0x40>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_Init+0x40>)
 8000b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_Init+0x40>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_Init+0x40>)
 8000b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 fd2b 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f808 	bl	8000bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba0:	f7ff fe8c 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023c00 	.word	0x40023c00

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x54>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x58>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fd43 	bl	800165a <HAL_SYSTICK_Config>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00e      	b.n	8000bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d80a      	bhi.n	8000bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bec:	f000 fd0b 	bl	8001606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <HAL_InitTick+0x5c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e000      	b.n	8000bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000000 	.word	0x20000000
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000004 	.word	0x20000004

08000c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x20>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x24>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_IncTick+0x24>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000120 	.word	0x20000120

08000c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_GetTick+0x14>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000120 	.word	0x20000120

08000c50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e033      	b.n	8000cce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d109      	bne.n	8000c82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff fe4c 	bl	800090c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d118      	bne.n	8000cc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c96:	f023 0302 	bic.w	r3, r3, #2
 8000c9a:	f043 0202 	orr.w	r2, r3, #2
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 fad8 	bl	8001258 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f023 0303 	bic.w	r3, r3, #3
 8000cb6:	f043 0201 	orr.w	r2, r3, #1
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	641a      	str	r2, [r3, #64]	; 0x40
 8000cbe:	e001      	b.n	8000cc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d101      	bne.n	8000cf2 <HAL_ADC_Start+0x1a>
 8000cee:	2302      	movs	r3, #2
 8000cf0:	e0b2      	b.n	8000e58 <HAL_ADC_Start+0x180>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d018      	beq.n	8000d3a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	689a      	ldr	r2, [r3, #8]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 0201 	orr.w	r2, r2, #1
 8000d16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d18:	4b52      	ldr	r3, [pc, #328]	; (8000e64 <HAL_ADC_Start+0x18c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a52      	ldr	r2, [pc, #328]	; (8000e68 <HAL_ADC_Start+0x190>)
 8000d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d22:	0c9a      	lsrs	r2, r3, #18
 8000d24:	4613      	mov	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4413      	add	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d2c:	e002      	b.n	8000d34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f9      	bne.n	8000d2e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d17a      	bne.n	8000e3e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d50:	f023 0301 	bic.w	r3, r3, #1
 8000d54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d007      	beq.n	8000d7a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d86:	d106      	bne.n	8000d96 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8c:	f023 0206 	bic.w	r2, r3, #6
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	645a      	str	r2, [r3, #68]	; 0x44
 8000d94:	e002      	b.n	8000d9c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000da4:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <HAL_ADC_Start+0x194>)
 8000da6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000db0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 031f 	and.w	r3, r3, #31
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d12a      	bne.n	8000e14 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a2b      	ldr	r2, [pc, #172]	; (8000e70 <HAL_ADC_Start+0x198>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d015      	beq.n	8000df4 <HAL_ADC_Start+0x11c>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a29      	ldr	r2, [pc, #164]	; (8000e74 <HAL_ADC_Start+0x19c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d105      	bne.n	8000dde <HAL_ADC_Start+0x106>
 8000dd2:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <HAL_ADC_Start+0x194>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 031f 	and.w	r3, r3, #31
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00a      	beq.n	8000df4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a25      	ldr	r2, [pc, #148]	; (8000e78 <HAL_ADC_Start+0x1a0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d136      	bne.n	8000e56 <HAL_ADC_Start+0x17e>
 8000de8:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <HAL_ADC_Start+0x194>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f003 0310 	and.w	r3, r3, #16
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d130      	bne.n	8000e56 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d129      	bne.n	8000e56 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	e020      	b.n	8000e56 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a15      	ldr	r2, [pc, #84]	; (8000e70 <HAL_ADC_Start+0x198>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d11b      	bne.n	8000e56 <HAL_ADC_Start+0x17e>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d114      	bne.n	8000e56 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	e00b      	b.n	8000e56 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f043 0210 	orr.w	r2, r3, #16
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f043 0201 	orr.w	r2, r3, #1
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	20000000 	.word	0x20000000
 8000e68:	431bde83 	.word	0x431bde83
 8000e6c:	40012300 	.word	0x40012300
 8000e70:	40012000 	.word	0x40012000
 8000e74:	40012100 	.word	0x40012100
 8000e78:	40012200 	.word	0x40012200

08000e7c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d101      	bne.n	8000e92 <HAL_ADC_Stop+0x16>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e021      	b.n	8000ed6 <HAL_ADC_Stop+0x5a>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0201 	bic.w	r2, r2, #1
 8000ea8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d109      	bne.n	8000ecc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ec0:	f023 0301 	bic.w	r3, r3, #1
 8000ec4:	f043 0201 	orr.w	r2, r3, #1
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000efe:	d113      	bne.n	8000f28 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f0e:	d10b      	bne.n	8000f28 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	f043 0220 	orr.w	r2, r3, #32
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e063      	b.n	8000ff0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000f28:	f7ff fe86 	bl	8000c38 <HAL_GetTick>
 8000f2c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f2e:	e021      	b.n	8000f74 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f36:	d01d      	beq.n	8000f74 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d007      	beq.n	8000f4e <HAL_ADC_PollForConversion+0x6c>
 8000f3e:	f7ff fe7b 	bl	8000c38 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d212      	bcs.n	8000f74 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d00b      	beq.n	8000f74 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f043 0204 	orr.w	r2, r3, #4
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e03d      	b.n	8000ff0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d1d6      	bne.n	8000f30 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f06f 0212 	mvn.w	r2, #18
 8000f8a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d123      	bne.n	8000fee <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d11f      	bne.n	8000fee <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d006      	beq.n	8000fca <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d111      	bne.n	8000fee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d105      	bne.n	8000fee <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	f043 0201 	orr.w	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001028:	2b01      	cmp	r3, #1
 800102a:	d101      	bne.n	8001030 <HAL_ADC_ConfigChannel+0x1c>
 800102c:	2302      	movs	r3, #2
 800102e:	e105      	b.n	800123c <HAL_ADC_ConfigChannel+0x228>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2201      	movs	r2, #1
 8001034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b09      	cmp	r3, #9
 800103e:	d925      	bls.n	800108c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68d9      	ldr	r1, [r3, #12]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	461a      	mov	r2, r3
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	3b1e      	subs	r3, #30
 8001056:	2207      	movs	r2, #7
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43da      	mvns	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	400a      	ands	r2, r1
 8001064:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68d9      	ldr	r1, [r3, #12]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	b29b      	uxth	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	4603      	mov	r3, r0
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4403      	add	r3, r0
 800107e:	3b1e      	subs	r3, #30
 8001080:	409a      	lsls	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	430a      	orrs	r2, r1
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	e022      	b.n	80010d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	6919      	ldr	r1, [r3, #16]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	b29b      	uxth	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	2207      	movs	r2, #7
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	400a      	ands	r2, r1
 80010ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6919      	ldr	r1, [r3, #16]
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	4603      	mov	r3, r0
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4403      	add	r3, r0
 80010c8:	409a      	lsls	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d824      	bhi.n	8001124 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	3b05      	subs	r3, #5
 80010ec:	221f      	movs	r2, #31
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	400a      	ands	r2, r1
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	4618      	mov	r0, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	3b05      	subs	r3, #5
 8001116:	fa00 f203 	lsl.w	r2, r0, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	430a      	orrs	r2, r1
 8001120:	635a      	str	r2, [r3, #52]	; 0x34
 8001122:	e04c      	b.n	80011be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b0c      	cmp	r3, #12
 800112a:	d824      	bhi.n	8001176 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	3b23      	subs	r3, #35	; 0x23
 800113e:	221f      	movs	r2, #31
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43da      	mvns	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	400a      	ands	r2, r1
 800114c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	b29b      	uxth	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	3b23      	subs	r3, #35	; 0x23
 8001168:	fa00 f203 	lsl.w	r2, r0, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	631a      	str	r2, [r3, #48]	; 0x30
 8001174:	e023      	b.n	80011be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	3b41      	subs	r3, #65	; 0x41
 8001188:	221f      	movs	r2, #31
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	400a      	ands	r2, r1
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	3b41      	subs	r3, #65	; 0x41
 80011b2:	fa00 f203 	lsl.w	r2, r0, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_ADC_ConfigChannel+0x234>)
 80011c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a21      	ldr	r2, [pc, #132]	; (800124c <HAL_ADC_ConfigChannel+0x238>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d109      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1cc>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b12      	cmp	r3, #18
 80011d2:	d105      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a19      	ldr	r2, [pc, #100]	; (800124c <HAL_ADC_ConfigChannel+0x238>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d123      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x21e>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d003      	beq.n	80011fa <HAL_ADC_ConfigChannel+0x1e6>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b11      	cmp	r3, #17
 80011f8:	d11b      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b10      	cmp	r3, #16
 800120c:	d111      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_ADC_ConfigChannel+0x23c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <HAL_ADC_ConfigChannel+0x240>)
 8001214:	fba2 2303 	umull	r2, r3, r2, r3
 8001218:	0c9a      	lsrs	r2, r3, #18
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001224:	e002      	b.n	800122c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	3b01      	subs	r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f9      	bne.n	8001226 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	40012300 	.word	0x40012300
 800124c:	40012000 	.word	0x40012000
 8001250:	20000000 	.word	0x20000000
 8001254:	431bde83 	.word	0x431bde83

08001258 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001260:	4b79      	ldr	r3, [pc, #484]	; (8001448 <ADC_Init+0x1f0>)
 8001262:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	431a      	orrs	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800128c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6859      	ldr	r1, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	021a      	lsls	r2, r3, #8
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6899      	ldr	r1, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ea:	4a58      	ldr	r2, [pc, #352]	; (800144c <ADC_Init+0x1f4>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d022      	beq.n	8001336 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6899      	ldr	r1, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6899      	ldr	r1, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	e00f      	b.n	8001356 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001344:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001354:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0202 	bic.w	r2, r2, #2
 8001364:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6899      	ldr	r1, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7e1b      	ldrb	r3, [r3, #24]
 8001370:	005a      	lsls	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d01b      	beq.n	80013bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001392:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6859      	ldr	r1, [r3, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	3b01      	subs	r3, #1
 80013b0:	035a      	lsls	r2, r3, #13
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	e007      	b.n	80013cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	051a      	lsls	r2, r3, #20
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6899      	ldr	r1, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800140e:	025a      	lsls	r2, r3, #9
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001426:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6899      	ldr	r1, [r3, #8]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	029a      	lsls	r2, r3, #10
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	609a      	str	r2, [r3, #8]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40012300 	.word	0x40012300
 800144c:	0f000001 	.word	0x0f000001

08001450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800146c:	4013      	ands	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800147c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001482:	4a04      	ldr	r2, [pc, #16]	; (8001494 <__NVIC_SetPriorityGrouping+0x44>)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	60d3      	str	r3, [r2, #12]
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <__NVIC_GetPriorityGrouping+0x18>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	f003 0307 	and.w	r3, r3, #7
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	db0b      	blt.n	80014de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f003 021f 	and.w	r2, r3, #31
 80014cc:	4907      	ldr	r1, [pc, #28]	; (80014ec <__NVIC_EnableIRQ+0x38>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	2001      	movs	r0, #1
 80014d6:	fa00 f202 	lsl.w	r2, r0, r2
 80014da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000e100 	.word	0xe000e100

080014f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	db0a      	blt.n	800151a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	490c      	ldr	r1, [pc, #48]	; (800153c <__NVIC_SetPriority+0x4c>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	440b      	add	r3, r1
 8001514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001518:	e00a      	b.n	8001530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4908      	ldr	r1, [pc, #32]	; (8001540 <__NVIC_SetPriority+0x50>)
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	3b04      	subs	r3, #4
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	440b      	add	r3, r1
 800152e:	761a      	strb	r2, [r3, #24]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001544:	b480      	push	{r7}
 8001546:	b089      	sub	sp, #36	; 0x24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f1c3 0307 	rsb	r3, r3, #7
 800155e:	2b04      	cmp	r3, #4
 8001560:	bf28      	it	cs
 8001562:	2304      	movcs	r3, #4
 8001564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3304      	adds	r3, #4
 800156a:	2b06      	cmp	r3, #6
 800156c:	d902      	bls.n	8001574 <NVIC_EncodePriority+0x30>
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3b03      	subs	r3, #3
 8001572:	e000      	b.n	8001576 <NVIC_EncodePriority+0x32>
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	f04f 32ff 	mov.w	r2, #4294967295
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	401a      	ands	r2, r3
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43d9      	mvns	r1, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	4313      	orrs	r3, r2
         );
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015bc:	d301      	bcc.n	80015c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015be:	2301      	movs	r3, #1
 80015c0:	e00f      	b.n	80015e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <SysTick_Config+0x40>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ca:	210f      	movs	r1, #15
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f7ff ff8e 	bl	80014f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <SysTick_Config+0x40>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SysTick_Config+0x40>)
 80015dc:	2207      	movs	r2, #7
 80015de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	e000e010 	.word	0xe000e010

080015f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff29 	bl	8001450 <__NVIC_SetPriorityGrouping>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001618:	f7ff ff3e 	bl	8001498 <__NVIC_GetPriorityGrouping>
 800161c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff ff8e 	bl	8001544 <NVIC_EncodePriority>
 8001628:	4602      	mov	r2, r0
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff5d 	bl	80014f0 <__NVIC_SetPriority>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff31 	bl	80014b4 <__NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffa2 	bl	80015ac <SysTick_Config>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	e16b      	b.n	8001968 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001690:	2201      	movs	r2, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	f040 815a 	bne.w	8001962 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d005      	beq.n	80016c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d130      	bne.n	8001728 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	2203      	movs	r2, #3
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f003 0201 	and.w	r2, r3, #1
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b03      	cmp	r3, #3
 8001732:	d017      	beq.n	8001764 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d123      	bne.n	80017b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	08da      	lsrs	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3208      	adds	r2, #8
 8001778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	220f      	movs	r2, #15
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	08da      	lsrs	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3208      	adds	r2, #8
 80017b2:	69b9      	ldr	r1, [r7, #24]
 80017b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0203 	and.w	r2, r3, #3
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 80b4 	beq.w	8001962 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b60      	ldr	r3, [pc, #384]	; (8001980 <HAL_GPIO_Init+0x30c>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	4a5f      	ldr	r2, [pc, #380]	; (8001980 <HAL_GPIO_Init+0x30c>)
 8001804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001808:	6453      	str	r3, [r2, #68]	; 0x44
 800180a:	4b5d      	ldr	r3, [pc, #372]	; (8001980 <HAL_GPIO_Init+0x30c>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001816:	4a5b      	ldr	r2, [pc, #364]	; (8001984 <HAL_GPIO_Init+0x310>)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3302      	adds	r3, #2
 800181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	220f      	movs	r2, #15
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a52      	ldr	r2, [pc, #328]	; (8001988 <HAL_GPIO_Init+0x314>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d02b      	beq.n	800189a <HAL_GPIO_Init+0x226>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a51      	ldr	r2, [pc, #324]	; (800198c <HAL_GPIO_Init+0x318>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d025      	beq.n	8001896 <HAL_GPIO_Init+0x222>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a50      	ldr	r2, [pc, #320]	; (8001990 <HAL_GPIO_Init+0x31c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d01f      	beq.n	8001892 <HAL_GPIO_Init+0x21e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4f      	ldr	r2, [pc, #316]	; (8001994 <HAL_GPIO_Init+0x320>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d019      	beq.n	800188e <HAL_GPIO_Init+0x21a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4e      	ldr	r2, [pc, #312]	; (8001998 <HAL_GPIO_Init+0x324>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0x216>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4d      	ldr	r2, [pc, #308]	; (800199c <HAL_GPIO_Init+0x328>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00d      	beq.n	8001886 <HAL_GPIO_Init+0x212>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4c      	ldr	r2, [pc, #304]	; (80019a0 <HAL_GPIO_Init+0x32c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d007      	beq.n	8001882 <HAL_GPIO_Init+0x20e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4b      	ldr	r2, [pc, #300]	; (80019a4 <HAL_GPIO_Init+0x330>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_GPIO_Init+0x20a>
 800187a:	2307      	movs	r3, #7
 800187c:	e00e      	b.n	800189c <HAL_GPIO_Init+0x228>
 800187e:	2308      	movs	r3, #8
 8001880:	e00c      	b.n	800189c <HAL_GPIO_Init+0x228>
 8001882:	2306      	movs	r3, #6
 8001884:	e00a      	b.n	800189c <HAL_GPIO_Init+0x228>
 8001886:	2305      	movs	r3, #5
 8001888:	e008      	b.n	800189c <HAL_GPIO_Init+0x228>
 800188a:	2304      	movs	r3, #4
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x228>
 800188e:	2303      	movs	r3, #3
 8001890:	e004      	b.n	800189c <HAL_GPIO_Init+0x228>
 8001892:	2302      	movs	r3, #2
 8001894:	e002      	b.n	800189c <HAL_GPIO_Init+0x228>
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x228>
 800189a:	2300      	movs	r3, #0
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	f002 0203 	and.w	r2, r2, #3
 80018a2:	0092      	lsls	r2, r2, #2
 80018a4:	4093      	lsls	r3, r2
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018ac:	4935      	ldr	r1, [pc, #212]	; (8001984 <HAL_GPIO_Init+0x310>)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	089b      	lsrs	r3, r3, #2
 80018b2:	3302      	adds	r3, #2
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ba:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <HAL_GPIO_Init+0x334>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018de:	4a32      	ldr	r2, [pc, #200]	; (80019a8 <HAL_GPIO_Init+0x334>)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018e4:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <HAL_GPIO_Init+0x334>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001908:	4a27      	ldr	r2, [pc, #156]	; (80019a8 <HAL_GPIO_Init+0x334>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800190e:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <HAL_GPIO_Init+0x334>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001932:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_GPIO_Init+0x334>)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_GPIO_Init+0x334>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800195c:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <HAL_GPIO_Init+0x334>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3301      	adds	r3, #1
 8001966:	61fb      	str	r3, [r7, #28]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	2b0f      	cmp	r3, #15
 800196c:	f67f ae90 	bls.w	8001690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40013800 	.word	0x40013800
 8001988:	40020000 	.word	0x40020000
 800198c:	40020400 	.word	0x40020400
 8001990:	40020800 	.word	0x40020800
 8001994:	40020c00 	.word	0x40020c00
 8001998:	40021000 	.word	0x40021000
 800199c:	40021400 	.word	0x40021400
 80019a0:	40021800 	.word	0x40021800
 80019a4:	40021c00 	.word	0x40021c00
 80019a8:	40013c00 	.word	0x40013c00

080019ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
 80019b8:	4613      	mov	r3, r2
 80019ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019bc:	787b      	ldrb	r3, [r7, #1]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019c8:	e003      	b.n	80019d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019ca:	887b      	ldrh	r3, [r7, #2]
 80019cc:	041a      	lsls	r2, r3, #16
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	619a      	str	r2, [r3, #24]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019f6:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe ff42 	bl	8000888 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40013c00 	.word	0x40013c00

08001a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e267      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d075      	beq.n	8001b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a2e:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d00c      	beq.n	8001a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a3a:	4b85      	ldr	r3, [pc, #532]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d112      	bne.n	8001a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a46:	4b82      	ldr	r3, [pc, #520]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a52:	d10b      	bne.n	8001a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	4b7e      	ldr	r3, [pc, #504]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d05b      	beq.n	8001b18 <HAL_RCC_OscConfig+0x108>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d157      	bne.n	8001b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e242      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a74:	d106      	bne.n	8001a84 <HAL_RCC_OscConfig+0x74>
 8001a76:	4b76      	ldr	r3, [pc, #472]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a75      	ldr	r2, [pc, #468]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e01d      	b.n	8001ac0 <HAL_RCC_OscConfig+0xb0>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x98>
 8001a8e:	4b70      	ldr	r3, [pc, #448]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6f      	ldr	r2, [pc, #444]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b6d      	ldr	r3, [pc, #436]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a6c      	ldr	r2, [pc, #432]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e00b      	b.n	8001ac0 <HAL_RCC_OscConfig+0xb0>
 8001aa8:	4b69      	ldr	r3, [pc, #420]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a68      	ldr	r2, [pc, #416]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a65      	ldr	r2, [pc, #404]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d013      	beq.n	8001af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f8b6 	bl	8000c38 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f8b2 	bl	8000c38 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e207      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	4b5b      	ldr	r3, [pc, #364]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xc0>
 8001aee:	e014      	b.n	8001b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff f8a2 	bl	8000c38 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff f89e 	bl	8000c38 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	; 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e1f3      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	4b51      	ldr	r3, [pc, #324]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0xe8>
 8001b16:	e000      	b.n	8001b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d063      	beq.n	8001bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b26:	4b4a      	ldr	r3, [pc, #296]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b32:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d11c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b3e:	4b44      	ldr	r3, [pc, #272]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d116      	bne.n	8001b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4a:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <HAL_RCC_OscConfig+0x152>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d001      	beq.n	8001b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e1c7      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b62:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4937      	ldr	r1, [pc, #220]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	e03a      	b.n	8001bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d020      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b80:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <HAL_RCC_OscConfig+0x244>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff f857 	bl	8000c38 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8e:	f7ff f853 	bl	8000c38 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e1a8      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4925      	ldr	r1, [pc, #148]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
 8001bc0:	e015      	b.n	8001bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_OscConfig+0x244>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f836 	bl	8000c38 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd0:	f7ff f832 	bl	8000c38 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e187      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d036      	beq.n	8001c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d016      	beq.n	8001c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_RCC_OscConfig+0x248>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c08:	f7ff f816 	bl	8000c38 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c10:	f7ff f812 	bl	8000c38 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e167      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_RCC_OscConfig+0x240>)
 8001c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x200>
 8001c2e:	e01b      	b.n	8001c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_OscConfig+0x248>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7fe ffff 	bl	8000c38 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3c:	e00e      	b.n	8001c5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3e:	f7fe fffb 	bl	8000c38 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d907      	bls.n	8001c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e150      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
 8001c50:	40023800 	.word	0x40023800
 8001c54:	42470000 	.word	0x42470000
 8001c58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5c:	4b88      	ldr	r3, [pc, #544]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ea      	bne.n	8001c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 8097 	beq.w	8001da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7a:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10f      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b7d      	ldr	r3, [pc, #500]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a7c      	ldr	r2, [pc, #496]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b7a      	ldr	r3, [pc, #488]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	4b77      	ldr	r3, [pc, #476]	; (8001e84 <HAL_RCC_OscConfig+0x474>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d118      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb2:	4b74      	ldr	r3, [pc, #464]	; (8001e84 <HAL_RCC_OscConfig+0x474>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a73      	ldr	r2, [pc, #460]	; (8001e84 <HAL_RCC_OscConfig+0x474>)
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cbe:	f7fe ffbb 	bl	8000c38 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc6:	f7fe ffb7 	bl	8000c38 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e10c      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd8:	4b6a      	ldr	r3, [pc, #424]	; (8001e84 <HAL_RCC_OscConfig+0x474>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x2ea>
 8001cec:	4b64      	ldr	r3, [pc, #400]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf0:	4a63      	ldr	r2, [pc, #396]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf8:	e01c      	b.n	8001d34 <HAL_RCC_OscConfig+0x324>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x30c>
 8001d02:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	4a5e      	ldr	r2, [pc, #376]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0e:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d12:	4a5b      	ldr	r2, [pc, #364]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0x324>
 8001d1c:	4b58      	ldr	r3, [pc, #352]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d20:	4a57      	ldr	r2, [pc, #348]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d22:	f023 0301 	bic.w	r3, r3, #1
 8001d26:	6713      	str	r3, [r2, #112]	; 0x70
 8001d28:	4b55      	ldr	r3, [pc, #340]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	4a54      	ldr	r2, [pc, #336]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d2e:	f023 0304 	bic.w	r3, r3, #4
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d015      	beq.n	8001d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7fe ff7c 	bl	8000c38 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d42:	e00a      	b.n	8001d5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d44:	f7fe ff78 	bl	8000c38 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e0cb      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5a:	4b49      	ldr	r3, [pc, #292]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0ee      	beq.n	8001d44 <HAL_RCC_OscConfig+0x334>
 8001d66:	e014      	b.n	8001d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d68:	f7fe ff66 	bl	8000c38 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7fe ff62 	bl	8000c38 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0b5      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d86:	4b3e      	ldr	r3, [pc, #248]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1ee      	bne.n	8001d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d98:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	4a38      	ldr	r2, [pc, #224]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80a1 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dae:	4b34      	ldr	r3, [pc, #208]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d05c      	beq.n	8001e74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d141      	bne.n	8001e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc2:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <HAL_RCC_OscConfig+0x478>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7fe ff36 	bl	8000c38 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7fe ff32 	bl	8000c38 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e087      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de2:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69da      	ldr	r2, [r3, #28]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	019b      	lsls	r3, r3, #6
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	085b      	lsrs	r3, r3, #1
 8001e06:	3b01      	subs	r3, #1
 8001e08:	041b      	lsls	r3, r3, #16
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	061b      	lsls	r3, r3, #24
 8001e12:	491b      	ldr	r1, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x478>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7fe ff0b 	bl	8000c38 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e26:	f7fe ff07 	bl	8000c38 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e05c      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x416>
 8001e44:	e054      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCC_OscConfig+0x478>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fef4 	bl	8000c38 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe fef0 	bl	8000c38 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e045      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_OscConfig+0x470>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x444>
 8001e72:	e03d      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e038      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40007000 	.word	0x40007000
 8001e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e8c:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_RCC_OscConfig+0x4ec>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d028      	beq.n	8001eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d121      	bne.n	8001eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d11a      	bne.n	8001eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d111      	bne.n	8001eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800

08001f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0cc      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4b68      	ldr	r3, [pc, #416]	; (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d90c      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b65      	ldr	r3, [pc, #404]	; (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b8      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f54:	4b59      	ldr	r3, [pc, #356]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a58      	ldr	r2, [pc, #352]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f6c:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4a52      	ldr	r2, [pc, #328]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	4b50      	ldr	r3, [pc, #320]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	494d      	ldr	r1, [pc, #308]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d044      	beq.n	8002020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d119      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e07f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d003      	beq.n	8001fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbe:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d109      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e06f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fce:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e067      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fde:	4b37      	ldr	r3, [pc, #220]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f023 0203 	bic.w	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	4934      	ldr	r1, [pc, #208]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff0:	f7fe fe22 	bl	8000c38 <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff8:	f7fe fe1e 	bl	8000c38 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e04f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 020c 	and.w	r2, r3, #12
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	429a      	cmp	r2, r3
 800201e:	d1eb      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d20c      	bcs.n	8002048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e032      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4916      	ldr	r1, [pc, #88]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	490e      	ldr	r1, [pc, #56]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002086:	f000 f821 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800208a:	4602      	mov	r2, r0
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	490a      	ldr	r1, [pc, #40]	; (80020c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	5ccb      	ldrb	r3, [r1, r3]
 800209a:	fa22 f303 	lsr.w	r3, r2, r3
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x1c8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fd82 	bl	8000bb0 <HAL_InitTick>

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023c00 	.word	0x40023c00
 80020bc:	40023800 	.word	0x40023800
 80020c0:	08003428 	.word	0x08003428
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020d0:	b094      	sub	sp, #80	; 0x50
 80020d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	647b      	str	r3, [r7, #68]	; 0x44
 80020d8:	2300      	movs	r3, #0
 80020da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020dc:	2300      	movs	r3, #0
 80020de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020e4:	4b79      	ldr	r3, [pc, #484]	; (80022cc <HAL_RCC_GetSysClockFreq+0x200>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d00d      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x40>
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	f200 80e1 	bhi.w	80022b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HAL_RCC_GetSysClockFreq+0x34>
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_GetSysClockFreq+0x3a>
 80020fe:	e0db      	b.n	80022b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002100:	4b73      	ldr	r3, [pc, #460]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002102:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002104:	e0db      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002106:	4b73      	ldr	r3, [pc, #460]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002108:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800210a:	e0d8      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800210c:	4b6f      	ldr	r3, [pc, #444]	; (80022cc <HAL_RCC_GetSysClockFreq+0x200>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002114:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002116:	4b6d      	ldr	r3, [pc, #436]	; (80022cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d063      	beq.n	80021ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002122:	4b6a      	ldr	r3, [pc, #424]	; (80022cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	099b      	lsrs	r3, r3, #6
 8002128:	2200      	movs	r2, #0
 800212a:	63bb      	str	r3, [r7, #56]	; 0x38
 800212c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002134:	633b      	str	r3, [r7, #48]	; 0x30
 8002136:	2300      	movs	r3, #0
 8002138:	637b      	str	r3, [r7, #52]	; 0x34
 800213a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800213e:	4622      	mov	r2, r4
 8002140:	462b      	mov	r3, r5
 8002142:	f04f 0000 	mov.w	r0, #0
 8002146:	f04f 0100 	mov.w	r1, #0
 800214a:	0159      	lsls	r1, r3, #5
 800214c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002150:	0150      	lsls	r0, r2, #5
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4621      	mov	r1, r4
 8002158:	1a51      	subs	r1, r2, r1
 800215a:	6139      	str	r1, [r7, #16]
 800215c:	4629      	mov	r1, r5
 800215e:	eb63 0301 	sbc.w	r3, r3, r1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002170:	4659      	mov	r1, fp
 8002172:	018b      	lsls	r3, r1, #6
 8002174:	4651      	mov	r1, sl
 8002176:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800217a:	4651      	mov	r1, sl
 800217c:	018a      	lsls	r2, r1, #6
 800217e:	4651      	mov	r1, sl
 8002180:	ebb2 0801 	subs.w	r8, r2, r1
 8002184:	4659      	mov	r1, fp
 8002186:	eb63 0901 	sbc.w	r9, r3, r1
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002196:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800219a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800219e:	4690      	mov	r8, r2
 80021a0:	4699      	mov	r9, r3
 80021a2:	4623      	mov	r3, r4
 80021a4:	eb18 0303 	adds.w	r3, r8, r3
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	462b      	mov	r3, r5
 80021ac:	eb49 0303 	adc.w	r3, r9, r3
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021be:	4629      	mov	r1, r5
 80021c0:	024b      	lsls	r3, r1, #9
 80021c2:	4621      	mov	r1, r4
 80021c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021c8:	4621      	mov	r1, r4
 80021ca:	024a      	lsls	r2, r1, #9
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021d2:	2200      	movs	r2, #0
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021dc:	f7fe f848 	bl	8000270 <__aeabi_uldivmod>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4613      	mov	r3, r2
 80021e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021e8:	e058      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ea:	4b38      	ldr	r3, [pc, #224]	; (80022cc <HAL_RCC_GetSysClockFreq+0x200>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	099b      	lsrs	r3, r3, #6
 80021f0:	2200      	movs	r2, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	4611      	mov	r1, r2
 80021f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021fa:	623b      	str	r3, [r7, #32]
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002200:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002204:	4642      	mov	r2, r8
 8002206:	464b      	mov	r3, r9
 8002208:	f04f 0000 	mov.w	r0, #0
 800220c:	f04f 0100 	mov.w	r1, #0
 8002210:	0159      	lsls	r1, r3, #5
 8002212:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002216:	0150      	lsls	r0, r2, #5
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4641      	mov	r1, r8
 800221e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002222:	4649      	mov	r1, r9
 8002224:	eb63 0b01 	sbc.w	fp, r3, r1
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002234:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002238:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800223c:	ebb2 040a 	subs.w	r4, r2, sl
 8002240:	eb63 050b 	sbc.w	r5, r3, fp
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	00eb      	lsls	r3, r5, #3
 800224e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002252:	00e2      	lsls	r2, r4, #3
 8002254:	4614      	mov	r4, r2
 8002256:	461d      	mov	r5, r3
 8002258:	4643      	mov	r3, r8
 800225a:	18e3      	adds	r3, r4, r3
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	464b      	mov	r3, r9
 8002260:	eb45 0303 	adc.w	r3, r5, r3
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002272:	4629      	mov	r1, r5
 8002274:	028b      	lsls	r3, r1, #10
 8002276:	4621      	mov	r1, r4
 8002278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800227c:	4621      	mov	r1, r4
 800227e:	028a      	lsls	r2, r1, #10
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002286:	2200      	movs	r2, #0
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	61fa      	str	r2, [r7, #28]
 800228c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002290:	f7fd ffee 	bl	8000270 <__aeabi_uldivmod>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4613      	mov	r3, r2
 800229a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_GetSysClockFreq+0x200>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	3301      	adds	r3, #1
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80022ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022b6:	e002      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80022ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3750      	adds	r7, #80	; 0x50
 80022c4:	46bd      	mov	sp, r7
 80022c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	00f42400 	.word	0x00f42400
 80022d4:	007a1200 	.word	0x007a1200

080022d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <HAL_RCC_GetHCLKFreq+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000000 	.word	0x20000000

080022f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022f4:	f7ff fff0 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 80022f8:	4602      	mov	r2, r0
 80022fa:	4b05      	ldr	r3, [pc, #20]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	0a9b      	lsrs	r3, r3, #10
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	4903      	ldr	r1, [pc, #12]	; (8002314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002306:	5ccb      	ldrb	r3, [r1, r3]
 8002308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	08003438 	.word	0x08003438

08002318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800231c:	f7ff ffdc 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0b5b      	lsrs	r3, r3, #13
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4903      	ldr	r1, [pc, #12]	; (800233c <HAL_RCC_GetPCLK2Freq+0x24>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	08003438 	.word	0x08003438

08002340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e03f      	b.n	80023d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7fe fb14 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2224      	movs	r2, #36	; 0x24
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f929 	bl	80025dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b08a      	sub	sp, #40	; 0x28
 80023de:	af02      	add	r7, sp, #8
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	4613      	mov	r3, r2
 80023e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	d17c      	bne.n	80024f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d002      	beq.n	8002406 <HAL_UART_Transmit+0x2c>
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e075      	b.n	80024f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_UART_Transmit+0x3e>
 8002414:	2302      	movs	r3, #2
 8002416:	e06e      	b.n	80024f6 <HAL_UART_Transmit+0x11c>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2221      	movs	r2, #33	; 0x21
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800242e:	f7fe fc03 	bl	8000c38 <HAL_GetTick>
 8002432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	88fa      	ldrh	r2, [r7, #6]
 8002438:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	88fa      	ldrh	r2, [r7, #6]
 800243e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002448:	d108      	bne.n	800245c <HAL_UART_Transmit+0x82>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d104      	bne.n	800245c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	e003      	b.n	8002464 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800246c:	e02a      	b.n	80024c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2200      	movs	r2, #0
 8002476:	2180      	movs	r1, #128	; 0x80
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 f840 	bl	80024fe <UART_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e036      	b.n	80024f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10b      	bne.n	80024a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800249c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	3302      	adds	r3, #2
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	e007      	b.n	80024b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	781a      	ldrb	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	3301      	adds	r3, #1
 80024b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	3b01      	subs	r3, #1
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1cf      	bne.n	800246e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2200      	movs	r2, #0
 80024d6:	2140      	movs	r1, #64	; 0x40
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f810 	bl	80024fe <UART_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e006      	b.n	80024f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e000      	b.n	80024f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
  }
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3720      	adds	r7, #32
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b090      	sub	sp, #64	; 0x40
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	4613      	mov	r3, r2
 800250c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800250e:	e050      	b.n	80025b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d04c      	beq.n	80025b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <UART_WaitOnFlagUntilTimeout+0x30>
 800251e:	f7fe fb8b 	bl	8000c38 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800252a:	429a      	cmp	r2, r3
 800252c:	d241      	bcs.n	80025b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	330c      	adds	r3, #12
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002538:	e853 3f00 	ldrex	r3, [r3]
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	330c      	adds	r3, #12
 800254c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800254e:	637a      	str	r2, [r7, #52]	; 0x34
 8002550:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002552:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002556:	e841 2300 	strex	r3, r2, [r1]
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1e5      	bne.n	800252e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3314      	adds	r3, #20
 8002568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	e853 3f00 	ldrex	r3, [r3]
 8002570:	613b      	str	r3, [r7, #16]
   return(result);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	63bb      	str	r3, [r7, #56]	; 0x38
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3314      	adds	r3, #20
 8002580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002582:	623a      	str	r2, [r7, #32]
 8002584:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002586:	69f9      	ldr	r1, [r7, #28]
 8002588:	6a3a      	ldr	r2, [r7, #32]
 800258a:	e841 2300 	strex	r3, r2, [r1]
 800258e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1e5      	bne.n	8002562 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e00f      	b.n	80025d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4013      	ands	r3, r2
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	429a      	cmp	r2, r3
 80025c0:	bf0c      	ite	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	2300      	movne	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d09f      	beq.n	8002510 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3740      	adds	r7, #64	; 0x40
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e0:	b0c0      	sub	sp, #256	; 0x100
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f8:	68d9      	ldr	r1, [r3, #12]
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	ea40 0301 	orr.w	r3, r0, r1
 8002604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	431a      	orrs	r2, r3
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	431a      	orrs	r2, r3
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002634:	f021 010c 	bic.w	r1, r1, #12
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002642:	430b      	orrs	r3, r1
 8002644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002656:	6999      	ldr	r1, [r3, #24]
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	ea40 0301 	orr.w	r3, r0, r1
 8002662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4b8f      	ldr	r3, [pc, #572]	; (80028a8 <UART_SetConfig+0x2cc>)
 800266c:	429a      	cmp	r2, r3
 800266e:	d005      	beq.n	800267c <UART_SetConfig+0xa0>
 8002670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4b8d      	ldr	r3, [pc, #564]	; (80028ac <UART_SetConfig+0x2d0>)
 8002678:	429a      	cmp	r2, r3
 800267a:	d104      	bne.n	8002686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800267c:	f7ff fe4c 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 8002680:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002684:	e003      	b.n	800268e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002686:	f7ff fe33 	bl	80022f0 <HAL_RCC_GetPCLK1Freq>
 800268a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800268e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002698:	f040 810c 	bne.w	80028b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800269c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026a0:	2200      	movs	r2, #0
 80026a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026ae:	4622      	mov	r2, r4
 80026b0:	462b      	mov	r3, r5
 80026b2:	1891      	adds	r1, r2, r2
 80026b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80026b6:	415b      	adcs	r3, r3
 80026b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026be:	4621      	mov	r1, r4
 80026c0:	eb12 0801 	adds.w	r8, r2, r1
 80026c4:	4629      	mov	r1, r5
 80026c6:	eb43 0901 	adc.w	r9, r3, r1
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026de:	4690      	mov	r8, r2
 80026e0:	4699      	mov	r9, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	eb18 0303 	adds.w	r3, r8, r3
 80026e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026ec:	462b      	mov	r3, r5
 80026ee:	eb49 0303 	adc.w	r3, r9, r3
 80026f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002702:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800270a:	460b      	mov	r3, r1
 800270c:	18db      	adds	r3, r3, r3
 800270e:	653b      	str	r3, [r7, #80]	; 0x50
 8002710:	4613      	mov	r3, r2
 8002712:	eb42 0303 	adc.w	r3, r2, r3
 8002716:	657b      	str	r3, [r7, #84]	; 0x54
 8002718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800271c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002720:	f7fd fda6 	bl	8000270 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4b61      	ldr	r3, [pc, #388]	; (80028b0 <UART_SetConfig+0x2d4>)
 800272a:	fba3 2302 	umull	r2, r3, r3, r2
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	011c      	lsls	r4, r3, #4
 8002732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002736:	2200      	movs	r2, #0
 8002738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800273c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002744:	4642      	mov	r2, r8
 8002746:	464b      	mov	r3, r9
 8002748:	1891      	adds	r1, r2, r2
 800274a:	64b9      	str	r1, [r7, #72]	; 0x48
 800274c:	415b      	adcs	r3, r3
 800274e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002754:	4641      	mov	r1, r8
 8002756:	eb12 0a01 	adds.w	sl, r2, r1
 800275a:	4649      	mov	r1, r9
 800275c:	eb43 0b01 	adc.w	fp, r3, r1
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800276c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002774:	4692      	mov	sl, r2
 8002776:	469b      	mov	fp, r3
 8002778:	4643      	mov	r3, r8
 800277a:	eb1a 0303 	adds.w	r3, sl, r3
 800277e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002782:	464b      	mov	r3, r9
 8002784:	eb4b 0303 	adc.w	r3, fp, r3
 8002788:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002798:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800279c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027a0:	460b      	mov	r3, r1
 80027a2:	18db      	adds	r3, r3, r3
 80027a4:	643b      	str	r3, [r7, #64]	; 0x40
 80027a6:	4613      	mov	r3, r2
 80027a8:	eb42 0303 	adc.w	r3, r2, r3
 80027ac:	647b      	str	r3, [r7, #68]	; 0x44
 80027ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027b6:	f7fd fd5b 	bl	8000270 <__aeabi_uldivmod>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <UART_SetConfig+0x2d4>)
 80027c2:	fba3 2301 	umull	r2, r3, r3, r1
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2264      	movs	r2, #100	; 0x64
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	1acb      	subs	r3, r1, r3
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027d6:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <UART_SetConfig+0x2d4>)
 80027d8:	fba3 2302 	umull	r2, r3, r3, r2
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027e4:	441c      	add	r4, r3
 80027e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027ea:	2200      	movs	r2, #0
 80027ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027f8:	4642      	mov	r2, r8
 80027fa:	464b      	mov	r3, r9
 80027fc:	1891      	adds	r1, r2, r2
 80027fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002800:	415b      	adcs	r3, r3
 8002802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002808:	4641      	mov	r1, r8
 800280a:	1851      	adds	r1, r2, r1
 800280c:	6339      	str	r1, [r7, #48]	; 0x30
 800280e:	4649      	mov	r1, r9
 8002810:	414b      	adcs	r3, r1
 8002812:	637b      	str	r3, [r7, #52]	; 0x34
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002820:	4659      	mov	r1, fp
 8002822:	00cb      	lsls	r3, r1, #3
 8002824:	4651      	mov	r1, sl
 8002826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800282a:	4651      	mov	r1, sl
 800282c:	00ca      	lsls	r2, r1, #3
 800282e:	4610      	mov	r0, r2
 8002830:	4619      	mov	r1, r3
 8002832:	4603      	mov	r3, r0
 8002834:	4642      	mov	r2, r8
 8002836:	189b      	adds	r3, r3, r2
 8002838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800283c:	464b      	mov	r3, r9
 800283e:	460a      	mov	r2, r1
 8002840:	eb42 0303 	adc.w	r3, r2, r3
 8002844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002854:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800285c:	460b      	mov	r3, r1
 800285e:	18db      	adds	r3, r3, r3
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
 8002862:	4613      	mov	r3, r2
 8002864:	eb42 0303 	adc.w	r3, r2, r3
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800286a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800286e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002872:	f7fd fcfd 	bl	8000270 <__aeabi_uldivmod>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <UART_SetConfig+0x2d4>)
 800287c:	fba3 1302 	umull	r1, r3, r3, r2
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	2164      	movs	r1, #100	; 0x64
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	3332      	adds	r3, #50	; 0x32
 800288e:	4a08      	ldr	r2, [pc, #32]	; (80028b0 <UART_SetConfig+0x2d4>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	f003 0207 	and.w	r2, r3, #7
 800289a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4422      	add	r2, r4
 80028a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028a4:	e106      	b.n	8002ab4 <UART_SetConfig+0x4d8>
 80028a6:	bf00      	nop
 80028a8:	40011000 	.word	0x40011000
 80028ac:	40011400 	.word	0x40011400
 80028b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028b8:	2200      	movs	r2, #0
 80028ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028c6:	4642      	mov	r2, r8
 80028c8:	464b      	mov	r3, r9
 80028ca:	1891      	adds	r1, r2, r2
 80028cc:	6239      	str	r1, [r7, #32]
 80028ce:	415b      	adcs	r3, r3
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
 80028d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028d6:	4641      	mov	r1, r8
 80028d8:	1854      	adds	r4, r2, r1
 80028da:	4649      	mov	r1, r9
 80028dc:	eb43 0501 	adc.w	r5, r3, r1
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	00eb      	lsls	r3, r5, #3
 80028ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ee:	00e2      	lsls	r2, r4, #3
 80028f0:	4614      	mov	r4, r2
 80028f2:	461d      	mov	r5, r3
 80028f4:	4643      	mov	r3, r8
 80028f6:	18e3      	adds	r3, r4, r3
 80028f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028fc:	464b      	mov	r3, r9
 80028fe:	eb45 0303 	adc.w	r3, r5, r3
 8002902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002912:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002922:	4629      	mov	r1, r5
 8002924:	008b      	lsls	r3, r1, #2
 8002926:	4621      	mov	r1, r4
 8002928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800292c:	4621      	mov	r1, r4
 800292e:	008a      	lsls	r2, r1, #2
 8002930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002934:	f7fd fc9c 	bl	8000270 <__aeabi_uldivmod>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4b60      	ldr	r3, [pc, #384]	; (8002ac0 <UART_SetConfig+0x4e4>)
 800293e:	fba3 2302 	umull	r2, r3, r3, r2
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	011c      	lsls	r4, r3, #4
 8002946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800294a:	2200      	movs	r2, #0
 800294c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002950:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002958:	4642      	mov	r2, r8
 800295a:	464b      	mov	r3, r9
 800295c:	1891      	adds	r1, r2, r2
 800295e:	61b9      	str	r1, [r7, #24]
 8002960:	415b      	adcs	r3, r3
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002968:	4641      	mov	r1, r8
 800296a:	1851      	adds	r1, r2, r1
 800296c:	6139      	str	r1, [r7, #16]
 800296e:	4649      	mov	r1, r9
 8002970:	414b      	adcs	r3, r1
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002980:	4659      	mov	r1, fp
 8002982:	00cb      	lsls	r3, r1, #3
 8002984:	4651      	mov	r1, sl
 8002986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800298a:	4651      	mov	r1, sl
 800298c:	00ca      	lsls	r2, r1, #3
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	4603      	mov	r3, r0
 8002994:	4642      	mov	r2, r8
 8002996:	189b      	adds	r3, r3, r2
 8002998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800299c:	464b      	mov	r3, r9
 800299e:	460a      	mov	r2, r1
 80029a0:	eb42 0303 	adc.w	r3, r2, r3
 80029a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80029b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029c0:	4649      	mov	r1, r9
 80029c2:	008b      	lsls	r3, r1, #2
 80029c4:	4641      	mov	r1, r8
 80029c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ca:	4641      	mov	r1, r8
 80029cc:	008a      	lsls	r2, r1, #2
 80029ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029d2:	f7fd fc4d 	bl	8000270 <__aeabi_uldivmod>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <UART_SetConfig+0x4e4>)
 80029de:	fba3 2301 	umull	r2, r3, r3, r1
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	2264      	movs	r2, #100	; 0x64
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	1acb      	subs	r3, r1, r3
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	3332      	adds	r3, #50	; 0x32
 80029f0:	4a33      	ldr	r2, [pc, #204]	; (8002ac0 <UART_SetConfig+0x4e4>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fc:	441c      	add	r4, r3
 80029fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a02:	2200      	movs	r2, #0
 8002a04:	673b      	str	r3, [r7, #112]	; 0x70
 8002a06:	677a      	str	r2, [r7, #116]	; 0x74
 8002a08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	464b      	mov	r3, r9
 8002a10:	1891      	adds	r1, r2, r2
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	415b      	adcs	r3, r3
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	1851      	adds	r1, r2, r1
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	4649      	mov	r1, r9
 8002a24:	414b      	adcs	r3, r1
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a34:	4659      	mov	r1, fp
 8002a36:	00cb      	lsls	r3, r1, #3
 8002a38:	4651      	mov	r1, sl
 8002a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a3e:	4651      	mov	r1, sl
 8002a40:	00ca      	lsls	r2, r1, #3
 8002a42:	4610      	mov	r0, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	4642      	mov	r2, r8
 8002a4a:	189b      	adds	r3, r3, r2
 8002a4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a4e:	464b      	mov	r3, r9
 8002a50:	460a      	mov	r2, r1
 8002a52:	eb42 0303 	adc.w	r3, r2, r3
 8002a56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	663b      	str	r3, [r7, #96]	; 0x60
 8002a62:	667a      	str	r2, [r7, #100]	; 0x64
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a70:	4649      	mov	r1, r9
 8002a72:	008b      	lsls	r3, r1, #2
 8002a74:	4641      	mov	r1, r8
 8002a76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a7a:	4641      	mov	r1, r8
 8002a7c:	008a      	lsls	r2, r1, #2
 8002a7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a82:	f7fd fbf5 	bl	8000270 <__aeabi_uldivmod>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <UART_SetConfig+0x4e4>)
 8002a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	2164      	movs	r1, #100	; 0x64
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	3332      	adds	r3, #50	; 0x32
 8002a9e:	4a08      	ldr	r2, [pc, #32]	; (8002ac0 <UART_SetConfig+0x4e4>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	f003 020f 	and.w	r2, r3, #15
 8002aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4422      	add	r2, r4
 8002ab2:	609a      	str	r2, [r3, #8]
}
 8002ab4:	bf00      	nop
 8002ab6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002aba:	46bd      	mov	sp, r7
 8002abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ac0:	51eb851f 	.word	0x51eb851f

08002ac4 <siprintf>:
 8002ac4:	b40e      	push	{r1, r2, r3}
 8002ac6:	b500      	push	{lr}
 8002ac8:	b09c      	sub	sp, #112	; 0x70
 8002aca:	ab1d      	add	r3, sp, #116	; 0x74
 8002acc:	9002      	str	r0, [sp, #8]
 8002ace:	9006      	str	r0, [sp, #24]
 8002ad0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ad4:	4809      	ldr	r0, [pc, #36]	; (8002afc <siprintf+0x38>)
 8002ad6:	9107      	str	r1, [sp, #28]
 8002ad8:	9104      	str	r1, [sp, #16]
 8002ada:	4909      	ldr	r1, [pc, #36]	; (8002b00 <siprintf+0x3c>)
 8002adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ae0:	9105      	str	r1, [sp, #20]
 8002ae2:	6800      	ldr	r0, [r0, #0]
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	a902      	add	r1, sp, #8
 8002ae8:	f000 f992 	bl	8002e10 <_svfiprintf_r>
 8002aec:	9b02      	ldr	r3, [sp, #8]
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	b01c      	add	sp, #112	; 0x70
 8002af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002af8:	b003      	add	sp, #12
 8002afa:	4770      	bx	lr
 8002afc:	20000058 	.word	0x20000058
 8002b00:	ffff0208 	.word	0xffff0208

08002b04 <memset>:
 8002b04:	4402      	add	r2, r0
 8002b06:	4603      	mov	r3, r0
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d100      	bne.n	8002b0e <memset+0xa>
 8002b0c:	4770      	bx	lr
 8002b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b12:	e7f9      	b.n	8002b08 <memset+0x4>

08002b14 <__errno>:
 8002b14:	4b01      	ldr	r3, [pc, #4]	; (8002b1c <__errno+0x8>)
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000058 	.word	0x20000058

08002b20 <__libc_init_array>:
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	4d0d      	ldr	r5, [pc, #52]	; (8002b58 <__libc_init_array+0x38>)
 8002b24:	4c0d      	ldr	r4, [pc, #52]	; (8002b5c <__libc_init_array+0x3c>)
 8002b26:	1b64      	subs	r4, r4, r5
 8002b28:	10a4      	asrs	r4, r4, #2
 8002b2a:	2600      	movs	r6, #0
 8002b2c:	42a6      	cmp	r6, r4
 8002b2e:	d109      	bne.n	8002b44 <__libc_init_array+0x24>
 8002b30:	4d0b      	ldr	r5, [pc, #44]	; (8002b60 <__libc_init_array+0x40>)
 8002b32:	4c0c      	ldr	r4, [pc, #48]	; (8002b64 <__libc_init_array+0x44>)
 8002b34:	f000 fc6a 	bl	800340c <_init>
 8002b38:	1b64      	subs	r4, r4, r5
 8002b3a:	10a4      	asrs	r4, r4, #2
 8002b3c:	2600      	movs	r6, #0
 8002b3e:	42a6      	cmp	r6, r4
 8002b40:	d105      	bne.n	8002b4e <__libc_init_array+0x2e>
 8002b42:	bd70      	pop	{r4, r5, r6, pc}
 8002b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b48:	4798      	blx	r3
 8002b4a:	3601      	adds	r6, #1
 8002b4c:	e7ee      	b.n	8002b2c <__libc_init_array+0xc>
 8002b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b52:	4798      	blx	r3
 8002b54:	3601      	adds	r6, #1
 8002b56:	e7f2      	b.n	8002b3e <__libc_init_array+0x1e>
 8002b58:	0800347c 	.word	0x0800347c
 8002b5c:	0800347c 	.word	0x0800347c
 8002b60:	0800347c 	.word	0x0800347c
 8002b64:	08003480 	.word	0x08003480

08002b68 <__retarget_lock_acquire_recursive>:
 8002b68:	4770      	bx	lr

08002b6a <__retarget_lock_release_recursive>:
 8002b6a:	4770      	bx	lr

08002b6c <_free_r>:
 8002b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b6e:	2900      	cmp	r1, #0
 8002b70:	d044      	beq.n	8002bfc <_free_r+0x90>
 8002b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b76:	9001      	str	r0, [sp, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f1a1 0404 	sub.w	r4, r1, #4
 8002b7e:	bfb8      	it	lt
 8002b80:	18e4      	addlt	r4, r4, r3
 8002b82:	f000 f8df 	bl	8002d44 <__malloc_lock>
 8002b86:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <_free_r+0x94>)
 8002b88:	9801      	ldr	r0, [sp, #4]
 8002b8a:	6813      	ldr	r3, [r2, #0]
 8002b8c:	b933      	cbnz	r3, 8002b9c <_free_r+0x30>
 8002b8e:	6063      	str	r3, [r4, #4]
 8002b90:	6014      	str	r4, [r2, #0]
 8002b92:	b003      	add	sp, #12
 8002b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b98:	f000 b8da 	b.w	8002d50 <__malloc_unlock>
 8002b9c:	42a3      	cmp	r3, r4
 8002b9e:	d908      	bls.n	8002bb2 <_free_r+0x46>
 8002ba0:	6825      	ldr	r5, [r4, #0]
 8002ba2:	1961      	adds	r1, r4, r5
 8002ba4:	428b      	cmp	r3, r1
 8002ba6:	bf01      	itttt	eq
 8002ba8:	6819      	ldreq	r1, [r3, #0]
 8002baa:	685b      	ldreq	r3, [r3, #4]
 8002bac:	1949      	addeq	r1, r1, r5
 8002bae:	6021      	streq	r1, [r4, #0]
 8002bb0:	e7ed      	b.n	8002b8e <_free_r+0x22>
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	b10b      	cbz	r3, 8002bbc <_free_r+0x50>
 8002bb8:	42a3      	cmp	r3, r4
 8002bba:	d9fa      	bls.n	8002bb2 <_free_r+0x46>
 8002bbc:	6811      	ldr	r1, [r2, #0]
 8002bbe:	1855      	adds	r5, r2, r1
 8002bc0:	42a5      	cmp	r5, r4
 8002bc2:	d10b      	bne.n	8002bdc <_free_r+0x70>
 8002bc4:	6824      	ldr	r4, [r4, #0]
 8002bc6:	4421      	add	r1, r4
 8002bc8:	1854      	adds	r4, r2, r1
 8002bca:	42a3      	cmp	r3, r4
 8002bcc:	6011      	str	r1, [r2, #0]
 8002bce:	d1e0      	bne.n	8002b92 <_free_r+0x26>
 8002bd0:	681c      	ldr	r4, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	6053      	str	r3, [r2, #4]
 8002bd6:	440c      	add	r4, r1
 8002bd8:	6014      	str	r4, [r2, #0]
 8002bda:	e7da      	b.n	8002b92 <_free_r+0x26>
 8002bdc:	d902      	bls.n	8002be4 <_free_r+0x78>
 8002bde:	230c      	movs	r3, #12
 8002be0:	6003      	str	r3, [r0, #0]
 8002be2:	e7d6      	b.n	8002b92 <_free_r+0x26>
 8002be4:	6825      	ldr	r5, [r4, #0]
 8002be6:	1961      	adds	r1, r4, r5
 8002be8:	428b      	cmp	r3, r1
 8002bea:	bf04      	itt	eq
 8002bec:	6819      	ldreq	r1, [r3, #0]
 8002bee:	685b      	ldreq	r3, [r3, #4]
 8002bf0:	6063      	str	r3, [r4, #4]
 8002bf2:	bf04      	itt	eq
 8002bf4:	1949      	addeq	r1, r1, r5
 8002bf6:	6021      	streq	r1, [r4, #0]
 8002bf8:	6054      	str	r4, [r2, #4]
 8002bfa:	e7ca      	b.n	8002b92 <_free_r+0x26>
 8002bfc:	b003      	add	sp, #12
 8002bfe:	bd30      	pop	{r4, r5, pc}
 8002c00:	20000264 	.word	0x20000264

08002c04 <sbrk_aligned>:
 8002c04:	b570      	push	{r4, r5, r6, lr}
 8002c06:	4e0e      	ldr	r6, [pc, #56]	; (8002c40 <sbrk_aligned+0x3c>)
 8002c08:	460c      	mov	r4, r1
 8002c0a:	6831      	ldr	r1, [r6, #0]
 8002c0c:	4605      	mov	r5, r0
 8002c0e:	b911      	cbnz	r1, 8002c16 <sbrk_aligned+0x12>
 8002c10:	f000 fba6 	bl	8003360 <_sbrk_r>
 8002c14:	6030      	str	r0, [r6, #0]
 8002c16:	4621      	mov	r1, r4
 8002c18:	4628      	mov	r0, r5
 8002c1a:	f000 fba1 	bl	8003360 <_sbrk_r>
 8002c1e:	1c43      	adds	r3, r0, #1
 8002c20:	d00a      	beq.n	8002c38 <sbrk_aligned+0x34>
 8002c22:	1cc4      	adds	r4, r0, #3
 8002c24:	f024 0403 	bic.w	r4, r4, #3
 8002c28:	42a0      	cmp	r0, r4
 8002c2a:	d007      	beq.n	8002c3c <sbrk_aligned+0x38>
 8002c2c:	1a21      	subs	r1, r4, r0
 8002c2e:	4628      	mov	r0, r5
 8002c30:	f000 fb96 	bl	8003360 <_sbrk_r>
 8002c34:	3001      	adds	r0, #1
 8002c36:	d101      	bne.n	8002c3c <sbrk_aligned+0x38>
 8002c38:	f04f 34ff 	mov.w	r4, #4294967295
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	bd70      	pop	{r4, r5, r6, pc}
 8002c40:	20000268 	.word	0x20000268

08002c44 <_malloc_r>:
 8002c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c48:	1ccd      	adds	r5, r1, #3
 8002c4a:	f025 0503 	bic.w	r5, r5, #3
 8002c4e:	3508      	adds	r5, #8
 8002c50:	2d0c      	cmp	r5, #12
 8002c52:	bf38      	it	cc
 8002c54:	250c      	movcc	r5, #12
 8002c56:	2d00      	cmp	r5, #0
 8002c58:	4607      	mov	r7, r0
 8002c5a:	db01      	blt.n	8002c60 <_malloc_r+0x1c>
 8002c5c:	42a9      	cmp	r1, r5
 8002c5e:	d905      	bls.n	8002c6c <_malloc_r+0x28>
 8002c60:	230c      	movs	r3, #12
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	2600      	movs	r6, #0
 8002c66:	4630      	mov	r0, r6
 8002c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002d40 <_malloc_r+0xfc>
 8002c70:	f000 f868 	bl	8002d44 <__malloc_lock>
 8002c74:	f8d8 3000 	ldr.w	r3, [r8]
 8002c78:	461c      	mov	r4, r3
 8002c7a:	bb5c      	cbnz	r4, 8002cd4 <_malloc_r+0x90>
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	4638      	mov	r0, r7
 8002c80:	f7ff ffc0 	bl	8002c04 <sbrk_aligned>
 8002c84:	1c43      	adds	r3, r0, #1
 8002c86:	4604      	mov	r4, r0
 8002c88:	d155      	bne.n	8002d36 <_malloc_r+0xf2>
 8002c8a:	f8d8 4000 	ldr.w	r4, [r8]
 8002c8e:	4626      	mov	r6, r4
 8002c90:	2e00      	cmp	r6, #0
 8002c92:	d145      	bne.n	8002d20 <_malloc_r+0xdc>
 8002c94:	2c00      	cmp	r4, #0
 8002c96:	d048      	beq.n	8002d2a <_malloc_r+0xe6>
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	4631      	mov	r1, r6
 8002c9c:	4638      	mov	r0, r7
 8002c9e:	eb04 0903 	add.w	r9, r4, r3
 8002ca2:	f000 fb5d 	bl	8003360 <_sbrk_r>
 8002ca6:	4581      	cmp	r9, r0
 8002ca8:	d13f      	bne.n	8002d2a <_malloc_r+0xe6>
 8002caa:	6821      	ldr	r1, [r4, #0]
 8002cac:	1a6d      	subs	r5, r5, r1
 8002cae:	4629      	mov	r1, r5
 8002cb0:	4638      	mov	r0, r7
 8002cb2:	f7ff ffa7 	bl	8002c04 <sbrk_aligned>
 8002cb6:	3001      	adds	r0, #1
 8002cb8:	d037      	beq.n	8002d2a <_malloc_r+0xe6>
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	442b      	add	r3, r5
 8002cbe:	6023      	str	r3, [r4, #0]
 8002cc0:	f8d8 3000 	ldr.w	r3, [r8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d038      	beq.n	8002d3a <_malloc_r+0xf6>
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	42a2      	cmp	r2, r4
 8002ccc:	d12b      	bne.n	8002d26 <_malloc_r+0xe2>
 8002cce:	2200      	movs	r2, #0
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	e00f      	b.n	8002cf4 <_malloc_r+0xb0>
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	1b52      	subs	r2, r2, r5
 8002cd8:	d41f      	bmi.n	8002d1a <_malloc_r+0xd6>
 8002cda:	2a0b      	cmp	r2, #11
 8002cdc:	d917      	bls.n	8002d0e <_malloc_r+0xca>
 8002cde:	1961      	adds	r1, r4, r5
 8002ce0:	42a3      	cmp	r3, r4
 8002ce2:	6025      	str	r5, [r4, #0]
 8002ce4:	bf18      	it	ne
 8002ce6:	6059      	strne	r1, [r3, #4]
 8002ce8:	6863      	ldr	r3, [r4, #4]
 8002cea:	bf08      	it	eq
 8002cec:	f8c8 1000 	streq.w	r1, [r8]
 8002cf0:	5162      	str	r2, [r4, r5]
 8002cf2:	604b      	str	r3, [r1, #4]
 8002cf4:	4638      	mov	r0, r7
 8002cf6:	f104 060b 	add.w	r6, r4, #11
 8002cfa:	f000 f829 	bl	8002d50 <__malloc_unlock>
 8002cfe:	f026 0607 	bic.w	r6, r6, #7
 8002d02:	1d23      	adds	r3, r4, #4
 8002d04:	1af2      	subs	r2, r6, r3
 8002d06:	d0ae      	beq.n	8002c66 <_malloc_r+0x22>
 8002d08:	1b9b      	subs	r3, r3, r6
 8002d0a:	50a3      	str	r3, [r4, r2]
 8002d0c:	e7ab      	b.n	8002c66 <_malloc_r+0x22>
 8002d0e:	42a3      	cmp	r3, r4
 8002d10:	6862      	ldr	r2, [r4, #4]
 8002d12:	d1dd      	bne.n	8002cd0 <_malloc_r+0x8c>
 8002d14:	f8c8 2000 	str.w	r2, [r8]
 8002d18:	e7ec      	b.n	8002cf4 <_malloc_r+0xb0>
 8002d1a:	4623      	mov	r3, r4
 8002d1c:	6864      	ldr	r4, [r4, #4]
 8002d1e:	e7ac      	b.n	8002c7a <_malloc_r+0x36>
 8002d20:	4634      	mov	r4, r6
 8002d22:	6876      	ldr	r6, [r6, #4]
 8002d24:	e7b4      	b.n	8002c90 <_malloc_r+0x4c>
 8002d26:	4613      	mov	r3, r2
 8002d28:	e7cc      	b.n	8002cc4 <_malloc_r+0x80>
 8002d2a:	230c      	movs	r3, #12
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	4638      	mov	r0, r7
 8002d30:	f000 f80e 	bl	8002d50 <__malloc_unlock>
 8002d34:	e797      	b.n	8002c66 <_malloc_r+0x22>
 8002d36:	6025      	str	r5, [r4, #0]
 8002d38:	e7dc      	b.n	8002cf4 <_malloc_r+0xb0>
 8002d3a:	605b      	str	r3, [r3, #4]
 8002d3c:	deff      	udf	#255	; 0xff
 8002d3e:	bf00      	nop
 8002d40:	20000264 	.word	0x20000264

08002d44 <__malloc_lock>:
 8002d44:	4801      	ldr	r0, [pc, #4]	; (8002d4c <__malloc_lock+0x8>)
 8002d46:	f7ff bf0f 	b.w	8002b68 <__retarget_lock_acquire_recursive>
 8002d4a:	bf00      	nop
 8002d4c:	20000260 	.word	0x20000260

08002d50 <__malloc_unlock>:
 8002d50:	4801      	ldr	r0, [pc, #4]	; (8002d58 <__malloc_unlock+0x8>)
 8002d52:	f7ff bf0a 	b.w	8002b6a <__retarget_lock_release_recursive>
 8002d56:	bf00      	nop
 8002d58:	20000260 	.word	0x20000260

08002d5c <__ssputs_r>:
 8002d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d60:	688e      	ldr	r6, [r1, #8]
 8002d62:	461f      	mov	r7, r3
 8002d64:	42be      	cmp	r6, r7
 8002d66:	680b      	ldr	r3, [r1, #0]
 8002d68:	4682      	mov	sl, r0
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	4690      	mov	r8, r2
 8002d6e:	d82c      	bhi.n	8002dca <__ssputs_r+0x6e>
 8002d70:	898a      	ldrh	r2, [r1, #12]
 8002d72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d76:	d026      	beq.n	8002dc6 <__ssputs_r+0x6a>
 8002d78:	6965      	ldr	r5, [r4, #20]
 8002d7a:	6909      	ldr	r1, [r1, #16]
 8002d7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d80:	eba3 0901 	sub.w	r9, r3, r1
 8002d84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d88:	1c7b      	adds	r3, r7, #1
 8002d8a:	444b      	add	r3, r9
 8002d8c:	106d      	asrs	r5, r5, #1
 8002d8e:	429d      	cmp	r5, r3
 8002d90:	bf38      	it	cc
 8002d92:	461d      	movcc	r5, r3
 8002d94:	0553      	lsls	r3, r2, #21
 8002d96:	d527      	bpl.n	8002de8 <__ssputs_r+0x8c>
 8002d98:	4629      	mov	r1, r5
 8002d9a:	f7ff ff53 	bl	8002c44 <_malloc_r>
 8002d9e:	4606      	mov	r6, r0
 8002da0:	b360      	cbz	r0, 8002dfc <__ssputs_r+0xa0>
 8002da2:	6921      	ldr	r1, [r4, #16]
 8002da4:	464a      	mov	r2, r9
 8002da6:	f000 faeb 	bl	8003380 <memcpy>
 8002daa:	89a3      	ldrh	r3, [r4, #12]
 8002dac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db4:	81a3      	strh	r3, [r4, #12]
 8002db6:	6126      	str	r6, [r4, #16]
 8002db8:	6165      	str	r5, [r4, #20]
 8002dba:	444e      	add	r6, r9
 8002dbc:	eba5 0509 	sub.w	r5, r5, r9
 8002dc0:	6026      	str	r6, [r4, #0]
 8002dc2:	60a5      	str	r5, [r4, #8]
 8002dc4:	463e      	mov	r6, r7
 8002dc6:	42be      	cmp	r6, r7
 8002dc8:	d900      	bls.n	8002dcc <__ssputs_r+0x70>
 8002dca:	463e      	mov	r6, r7
 8002dcc:	6820      	ldr	r0, [r4, #0]
 8002dce:	4632      	mov	r2, r6
 8002dd0:	4641      	mov	r1, r8
 8002dd2:	f000 faab 	bl	800332c <memmove>
 8002dd6:	68a3      	ldr	r3, [r4, #8]
 8002dd8:	1b9b      	subs	r3, r3, r6
 8002dda:	60a3      	str	r3, [r4, #8]
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	4433      	add	r3, r6
 8002de0:	6023      	str	r3, [r4, #0]
 8002de2:	2000      	movs	r0, #0
 8002de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002de8:	462a      	mov	r2, r5
 8002dea:	f000 fad7 	bl	800339c <_realloc_r>
 8002dee:	4606      	mov	r6, r0
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d1e0      	bne.n	8002db6 <__ssputs_r+0x5a>
 8002df4:	6921      	ldr	r1, [r4, #16]
 8002df6:	4650      	mov	r0, sl
 8002df8:	f7ff feb8 	bl	8002b6c <_free_r>
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	f8ca 3000 	str.w	r3, [sl]
 8002e02:	89a3      	ldrh	r3, [r4, #12]
 8002e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e08:	81a3      	strh	r3, [r4, #12]
 8002e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0e:	e7e9      	b.n	8002de4 <__ssputs_r+0x88>

08002e10 <_svfiprintf_r>:
 8002e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e14:	4698      	mov	r8, r3
 8002e16:	898b      	ldrh	r3, [r1, #12]
 8002e18:	061b      	lsls	r3, r3, #24
 8002e1a:	b09d      	sub	sp, #116	; 0x74
 8002e1c:	4607      	mov	r7, r0
 8002e1e:	460d      	mov	r5, r1
 8002e20:	4614      	mov	r4, r2
 8002e22:	d50e      	bpl.n	8002e42 <_svfiprintf_r+0x32>
 8002e24:	690b      	ldr	r3, [r1, #16]
 8002e26:	b963      	cbnz	r3, 8002e42 <_svfiprintf_r+0x32>
 8002e28:	2140      	movs	r1, #64	; 0x40
 8002e2a:	f7ff ff0b 	bl	8002c44 <_malloc_r>
 8002e2e:	6028      	str	r0, [r5, #0]
 8002e30:	6128      	str	r0, [r5, #16]
 8002e32:	b920      	cbnz	r0, 8002e3e <_svfiprintf_r+0x2e>
 8002e34:	230c      	movs	r3, #12
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3c:	e0d0      	b.n	8002fe0 <_svfiprintf_r+0x1d0>
 8002e3e:	2340      	movs	r3, #64	; 0x40
 8002e40:	616b      	str	r3, [r5, #20]
 8002e42:	2300      	movs	r3, #0
 8002e44:	9309      	str	r3, [sp, #36]	; 0x24
 8002e46:	2320      	movs	r3, #32
 8002e48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e50:	2330      	movs	r3, #48	; 0x30
 8002e52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002ff8 <_svfiprintf_r+0x1e8>
 8002e56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e5a:	f04f 0901 	mov.w	r9, #1
 8002e5e:	4623      	mov	r3, r4
 8002e60:	469a      	mov	sl, r3
 8002e62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e66:	b10a      	cbz	r2, 8002e6c <_svfiprintf_r+0x5c>
 8002e68:	2a25      	cmp	r2, #37	; 0x25
 8002e6a:	d1f9      	bne.n	8002e60 <_svfiprintf_r+0x50>
 8002e6c:	ebba 0b04 	subs.w	fp, sl, r4
 8002e70:	d00b      	beq.n	8002e8a <_svfiprintf_r+0x7a>
 8002e72:	465b      	mov	r3, fp
 8002e74:	4622      	mov	r2, r4
 8002e76:	4629      	mov	r1, r5
 8002e78:	4638      	mov	r0, r7
 8002e7a:	f7ff ff6f 	bl	8002d5c <__ssputs_r>
 8002e7e:	3001      	adds	r0, #1
 8002e80:	f000 80a9 	beq.w	8002fd6 <_svfiprintf_r+0x1c6>
 8002e84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e86:	445a      	add	r2, fp
 8002e88:	9209      	str	r2, [sp, #36]	; 0x24
 8002e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80a1 	beq.w	8002fd6 <_svfiprintf_r+0x1c6>
 8002e94:	2300      	movs	r3, #0
 8002e96:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e9e:	f10a 0a01 	add.w	sl, sl, #1
 8002ea2:	9304      	str	r3, [sp, #16]
 8002ea4:	9307      	str	r3, [sp, #28]
 8002ea6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002eaa:	931a      	str	r3, [sp, #104]	; 0x68
 8002eac:	4654      	mov	r4, sl
 8002eae:	2205      	movs	r2, #5
 8002eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eb4:	4850      	ldr	r0, [pc, #320]	; (8002ff8 <_svfiprintf_r+0x1e8>)
 8002eb6:	f7fd f98b 	bl	80001d0 <memchr>
 8002eba:	9a04      	ldr	r2, [sp, #16]
 8002ebc:	b9d8      	cbnz	r0, 8002ef6 <_svfiprintf_r+0xe6>
 8002ebe:	06d0      	lsls	r0, r2, #27
 8002ec0:	bf44      	itt	mi
 8002ec2:	2320      	movmi	r3, #32
 8002ec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ec8:	0711      	lsls	r1, r2, #28
 8002eca:	bf44      	itt	mi
 8002ecc:	232b      	movmi	r3, #43	; 0x2b
 8002ece:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ed2:	f89a 3000 	ldrb.w	r3, [sl]
 8002ed6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ed8:	d015      	beq.n	8002f06 <_svfiprintf_r+0xf6>
 8002eda:	9a07      	ldr	r2, [sp, #28]
 8002edc:	4654      	mov	r4, sl
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f04f 0c0a 	mov.w	ip, #10
 8002ee4:	4621      	mov	r1, r4
 8002ee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002eea:	3b30      	subs	r3, #48	; 0x30
 8002eec:	2b09      	cmp	r3, #9
 8002eee:	d94d      	bls.n	8002f8c <_svfiprintf_r+0x17c>
 8002ef0:	b1b0      	cbz	r0, 8002f20 <_svfiprintf_r+0x110>
 8002ef2:	9207      	str	r2, [sp, #28]
 8002ef4:	e014      	b.n	8002f20 <_svfiprintf_r+0x110>
 8002ef6:	eba0 0308 	sub.w	r3, r0, r8
 8002efa:	fa09 f303 	lsl.w	r3, r9, r3
 8002efe:	4313      	orrs	r3, r2
 8002f00:	9304      	str	r3, [sp, #16]
 8002f02:	46a2      	mov	sl, r4
 8002f04:	e7d2      	b.n	8002eac <_svfiprintf_r+0x9c>
 8002f06:	9b03      	ldr	r3, [sp, #12]
 8002f08:	1d19      	adds	r1, r3, #4
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	9103      	str	r1, [sp, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bfbb      	ittet	lt
 8002f12:	425b      	neglt	r3, r3
 8002f14:	f042 0202 	orrlt.w	r2, r2, #2
 8002f18:	9307      	strge	r3, [sp, #28]
 8002f1a:	9307      	strlt	r3, [sp, #28]
 8002f1c:	bfb8      	it	lt
 8002f1e:	9204      	strlt	r2, [sp, #16]
 8002f20:	7823      	ldrb	r3, [r4, #0]
 8002f22:	2b2e      	cmp	r3, #46	; 0x2e
 8002f24:	d10c      	bne.n	8002f40 <_svfiprintf_r+0x130>
 8002f26:	7863      	ldrb	r3, [r4, #1]
 8002f28:	2b2a      	cmp	r3, #42	; 0x2a
 8002f2a:	d134      	bne.n	8002f96 <_svfiprintf_r+0x186>
 8002f2c:	9b03      	ldr	r3, [sp, #12]
 8002f2e:	1d1a      	adds	r2, r3, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	9203      	str	r2, [sp, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bfb8      	it	lt
 8002f38:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f3c:	3402      	adds	r4, #2
 8002f3e:	9305      	str	r3, [sp, #20]
 8002f40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003008 <_svfiprintf_r+0x1f8>
 8002f44:	7821      	ldrb	r1, [r4, #0]
 8002f46:	2203      	movs	r2, #3
 8002f48:	4650      	mov	r0, sl
 8002f4a:	f7fd f941 	bl	80001d0 <memchr>
 8002f4e:	b138      	cbz	r0, 8002f60 <_svfiprintf_r+0x150>
 8002f50:	9b04      	ldr	r3, [sp, #16]
 8002f52:	eba0 000a 	sub.w	r0, r0, sl
 8002f56:	2240      	movs	r2, #64	; 0x40
 8002f58:	4082      	lsls	r2, r0
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	3401      	adds	r4, #1
 8002f5e:	9304      	str	r3, [sp, #16]
 8002f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f64:	4825      	ldr	r0, [pc, #148]	; (8002ffc <_svfiprintf_r+0x1ec>)
 8002f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f6a:	2206      	movs	r2, #6
 8002f6c:	f7fd f930 	bl	80001d0 <memchr>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d038      	beq.n	8002fe6 <_svfiprintf_r+0x1d6>
 8002f74:	4b22      	ldr	r3, [pc, #136]	; (8003000 <_svfiprintf_r+0x1f0>)
 8002f76:	bb1b      	cbnz	r3, 8002fc0 <_svfiprintf_r+0x1b0>
 8002f78:	9b03      	ldr	r3, [sp, #12]
 8002f7a:	3307      	adds	r3, #7
 8002f7c:	f023 0307 	bic.w	r3, r3, #7
 8002f80:	3308      	adds	r3, #8
 8002f82:	9303      	str	r3, [sp, #12]
 8002f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f86:	4433      	add	r3, r6
 8002f88:	9309      	str	r3, [sp, #36]	; 0x24
 8002f8a:	e768      	b.n	8002e5e <_svfiprintf_r+0x4e>
 8002f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f90:	460c      	mov	r4, r1
 8002f92:	2001      	movs	r0, #1
 8002f94:	e7a6      	b.n	8002ee4 <_svfiprintf_r+0xd4>
 8002f96:	2300      	movs	r3, #0
 8002f98:	3401      	adds	r4, #1
 8002f9a:	9305      	str	r3, [sp, #20]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f04f 0c0a 	mov.w	ip, #10
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fa8:	3a30      	subs	r2, #48	; 0x30
 8002faa:	2a09      	cmp	r2, #9
 8002fac:	d903      	bls.n	8002fb6 <_svfiprintf_r+0x1a6>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0c6      	beq.n	8002f40 <_svfiprintf_r+0x130>
 8002fb2:	9105      	str	r1, [sp, #20]
 8002fb4:	e7c4      	b.n	8002f40 <_svfiprintf_r+0x130>
 8002fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fba:	4604      	mov	r4, r0
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e7f0      	b.n	8002fa2 <_svfiprintf_r+0x192>
 8002fc0:	ab03      	add	r3, sp, #12
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	462a      	mov	r2, r5
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <_svfiprintf_r+0x1f4>)
 8002fc8:	a904      	add	r1, sp, #16
 8002fca:	4638      	mov	r0, r7
 8002fcc:	f3af 8000 	nop.w
 8002fd0:	1c42      	adds	r2, r0, #1
 8002fd2:	4606      	mov	r6, r0
 8002fd4:	d1d6      	bne.n	8002f84 <_svfiprintf_r+0x174>
 8002fd6:	89ab      	ldrh	r3, [r5, #12]
 8002fd8:	065b      	lsls	r3, r3, #25
 8002fda:	f53f af2d 	bmi.w	8002e38 <_svfiprintf_r+0x28>
 8002fde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fe0:	b01d      	add	sp, #116	; 0x74
 8002fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fe6:	ab03      	add	r3, sp, #12
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	462a      	mov	r2, r5
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <_svfiprintf_r+0x1f4>)
 8002fee:	a904      	add	r1, sp, #16
 8002ff0:	4638      	mov	r0, r7
 8002ff2:	f000 f879 	bl	80030e8 <_printf_i>
 8002ff6:	e7eb      	b.n	8002fd0 <_svfiprintf_r+0x1c0>
 8002ff8:	08003440 	.word	0x08003440
 8002ffc:	0800344a 	.word	0x0800344a
 8003000:	00000000 	.word	0x00000000
 8003004:	08002d5d 	.word	0x08002d5d
 8003008:	08003446 	.word	0x08003446

0800300c <_printf_common>:
 800300c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003010:	4616      	mov	r6, r2
 8003012:	4699      	mov	r9, r3
 8003014:	688a      	ldr	r2, [r1, #8]
 8003016:	690b      	ldr	r3, [r1, #16]
 8003018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800301c:	4293      	cmp	r3, r2
 800301e:	bfb8      	it	lt
 8003020:	4613      	movlt	r3, r2
 8003022:	6033      	str	r3, [r6, #0]
 8003024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003028:	4607      	mov	r7, r0
 800302a:	460c      	mov	r4, r1
 800302c:	b10a      	cbz	r2, 8003032 <_printf_common+0x26>
 800302e:	3301      	adds	r3, #1
 8003030:	6033      	str	r3, [r6, #0]
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	0699      	lsls	r1, r3, #26
 8003036:	bf42      	ittt	mi
 8003038:	6833      	ldrmi	r3, [r6, #0]
 800303a:	3302      	addmi	r3, #2
 800303c:	6033      	strmi	r3, [r6, #0]
 800303e:	6825      	ldr	r5, [r4, #0]
 8003040:	f015 0506 	ands.w	r5, r5, #6
 8003044:	d106      	bne.n	8003054 <_printf_common+0x48>
 8003046:	f104 0a19 	add.w	sl, r4, #25
 800304a:	68e3      	ldr	r3, [r4, #12]
 800304c:	6832      	ldr	r2, [r6, #0]
 800304e:	1a9b      	subs	r3, r3, r2
 8003050:	42ab      	cmp	r3, r5
 8003052:	dc26      	bgt.n	80030a2 <_printf_common+0x96>
 8003054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003058:	1e13      	subs	r3, r2, #0
 800305a:	6822      	ldr	r2, [r4, #0]
 800305c:	bf18      	it	ne
 800305e:	2301      	movne	r3, #1
 8003060:	0692      	lsls	r2, r2, #26
 8003062:	d42b      	bmi.n	80030bc <_printf_common+0xb0>
 8003064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003068:	4649      	mov	r1, r9
 800306a:	4638      	mov	r0, r7
 800306c:	47c0      	blx	r8
 800306e:	3001      	adds	r0, #1
 8003070:	d01e      	beq.n	80030b0 <_printf_common+0xa4>
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	6922      	ldr	r2, [r4, #16]
 8003076:	f003 0306 	and.w	r3, r3, #6
 800307a:	2b04      	cmp	r3, #4
 800307c:	bf02      	ittt	eq
 800307e:	68e5      	ldreq	r5, [r4, #12]
 8003080:	6833      	ldreq	r3, [r6, #0]
 8003082:	1aed      	subeq	r5, r5, r3
 8003084:	68a3      	ldr	r3, [r4, #8]
 8003086:	bf0c      	ite	eq
 8003088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800308c:	2500      	movne	r5, #0
 800308e:	4293      	cmp	r3, r2
 8003090:	bfc4      	itt	gt
 8003092:	1a9b      	subgt	r3, r3, r2
 8003094:	18ed      	addgt	r5, r5, r3
 8003096:	2600      	movs	r6, #0
 8003098:	341a      	adds	r4, #26
 800309a:	42b5      	cmp	r5, r6
 800309c:	d11a      	bne.n	80030d4 <_printf_common+0xc8>
 800309e:	2000      	movs	r0, #0
 80030a0:	e008      	b.n	80030b4 <_printf_common+0xa8>
 80030a2:	2301      	movs	r3, #1
 80030a4:	4652      	mov	r2, sl
 80030a6:	4649      	mov	r1, r9
 80030a8:	4638      	mov	r0, r7
 80030aa:	47c0      	blx	r8
 80030ac:	3001      	adds	r0, #1
 80030ae:	d103      	bne.n	80030b8 <_printf_common+0xac>
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030b8:	3501      	adds	r5, #1
 80030ba:	e7c6      	b.n	800304a <_printf_common+0x3e>
 80030bc:	18e1      	adds	r1, r4, r3
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	2030      	movs	r0, #48	; 0x30
 80030c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030c6:	4422      	add	r2, r4
 80030c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030d0:	3302      	adds	r3, #2
 80030d2:	e7c7      	b.n	8003064 <_printf_common+0x58>
 80030d4:	2301      	movs	r3, #1
 80030d6:	4622      	mov	r2, r4
 80030d8:	4649      	mov	r1, r9
 80030da:	4638      	mov	r0, r7
 80030dc:	47c0      	blx	r8
 80030de:	3001      	adds	r0, #1
 80030e0:	d0e6      	beq.n	80030b0 <_printf_common+0xa4>
 80030e2:	3601      	adds	r6, #1
 80030e4:	e7d9      	b.n	800309a <_printf_common+0x8e>
	...

080030e8 <_printf_i>:
 80030e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030ec:	7e0f      	ldrb	r7, [r1, #24]
 80030ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80030f0:	2f78      	cmp	r7, #120	; 0x78
 80030f2:	4691      	mov	r9, r2
 80030f4:	4680      	mov	r8, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	469a      	mov	sl, r3
 80030fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80030fe:	d807      	bhi.n	8003110 <_printf_i+0x28>
 8003100:	2f62      	cmp	r7, #98	; 0x62
 8003102:	d80a      	bhi.n	800311a <_printf_i+0x32>
 8003104:	2f00      	cmp	r7, #0
 8003106:	f000 80d4 	beq.w	80032b2 <_printf_i+0x1ca>
 800310a:	2f58      	cmp	r7, #88	; 0x58
 800310c:	f000 80c0 	beq.w	8003290 <_printf_i+0x1a8>
 8003110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003118:	e03a      	b.n	8003190 <_printf_i+0xa8>
 800311a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800311e:	2b15      	cmp	r3, #21
 8003120:	d8f6      	bhi.n	8003110 <_printf_i+0x28>
 8003122:	a101      	add	r1, pc, #4	; (adr r1, 8003128 <_printf_i+0x40>)
 8003124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003128:	08003181 	.word	0x08003181
 800312c:	08003195 	.word	0x08003195
 8003130:	08003111 	.word	0x08003111
 8003134:	08003111 	.word	0x08003111
 8003138:	08003111 	.word	0x08003111
 800313c:	08003111 	.word	0x08003111
 8003140:	08003195 	.word	0x08003195
 8003144:	08003111 	.word	0x08003111
 8003148:	08003111 	.word	0x08003111
 800314c:	08003111 	.word	0x08003111
 8003150:	08003111 	.word	0x08003111
 8003154:	08003299 	.word	0x08003299
 8003158:	080031c1 	.word	0x080031c1
 800315c:	08003253 	.word	0x08003253
 8003160:	08003111 	.word	0x08003111
 8003164:	08003111 	.word	0x08003111
 8003168:	080032bb 	.word	0x080032bb
 800316c:	08003111 	.word	0x08003111
 8003170:	080031c1 	.word	0x080031c1
 8003174:	08003111 	.word	0x08003111
 8003178:	08003111 	.word	0x08003111
 800317c:	0800325b 	.word	0x0800325b
 8003180:	682b      	ldr	r3, [r5, #0]
 8003182:	1d1a      	adds	r2, r3, #4
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	602a      	str	r2, [r5, #0]
 8003188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800318c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003190:	2301      	movs	r3, #1
 8003192:	e09f      	b.n	80032d4 <_printf_i+0x1ec>
 8003194:	6820      	ldr	r0, [r4, #0]
 8003196:	682b      	ldr	r3, [r5, #0]
 8003198:	0607      	lsls	r7, r0, #24
 800319a:	f103 0104 	add.w	r1, r3, #4
 800319e:	6029      	str	r1, [r5, #0]
 80031a0:	d501      	bpl.n	80031a6 <_printf_i+0xbe>
 80031a2:	681e      	ldr	r6, [r3, #0]
 80031a4:	e003      	b.n	80031ae <_printf_i+0xc6>
 80031a6:	0646      	lsls	r6, r0, #25
 80031a8:	d5fb      	bpl.n	80031a2 <_printf_i+0xba>
 80031aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80031ae:	2e00      	cmp	r6, #0
 80031b0:	da03      	bge.n	80031ba <_printf_i+0xd2>
 80031b2:	232d      	movs	r3, #45	; 0x2d
 80031b4:	4276      	negs	r6, r6
 80031b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031ba:	485a      	ldr	r0, [pc, #360]	; (8003324 <_printf_i+0x23c>)
 80031bc:	230a      	movs	r3, #10
 80031be:	e012      	b.n	80031e6 <_printf_i+0xfe>
 80031c0:	682b      	ldr	r3, [r5, #0]
 80031c2:	6820      	ldr	r0, [r4, #0]
 80031c4:	1d19      	adds	r1, r3, #4
 80031c6:	6029      	str	r1, [r5, #0]
 80031c8:	0605      	lsls	r5, r0, #24
 80031ca:	d501      	bpl.n	80031d0 <_printf_i+0xe8>
 80031cc:	681e      	ldr	r6, [r3, #0]
 80031ce:	e002      	b.n	80031d6 <_printf_i+0xee>
 80031d0:	0641      	lsls	r1, r0, #25
 80031d2:	d5fb      	bpl.n	80031cc <_printf_i+0xe4>
 80031d4:	881e      	ldrh	r6, [r3, #0]
 80031d6:	4853      	ldr	r0, [pc, #332]	; (8003324 <_printf_i+0x23c>)
 80031d8:	2f6f      	cmp	r7, #111	; 0x6f
 80031da:	bf0c      	ite	eq
 80031dc:	2308      	moveq	r3, #8
 80031de:	230a      	movne	r3, #10
 80031e0:	2100      	movs	r1, #0
 80031e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031e6:	6865      	ldr	r5, [r4, #4]
 80031e8:	60a5      	str	r5, [r4, #8]
 80031ea:	2d00      	cmp	r5, #0
 80031ec:	bfa2      	ittt	ge
 80031ee:	6821      	ldrge	r1, [r4, #0]
 80031f0:	f021 0104 	bicge.w	r1, r1, #4
 80031f4:	6021      	strge	r1, [r4, #0]
 80031f6:	b90e      	cbnz	r6, 80031fc <_printf_i+0x114>
 80031f8:	2d00      	cmp	r5, #0
 80031fa:	d04b      	beq.n	8003294 <_printf_i+0x1ac>
 80031fc:	4615      	mov	r5, r2
 80031fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8003202:	fb03 6711 	mls	r7, r3, r1, r6
 8003206:	5dc7      	ldrb	r7, [r0, r7]
 8003208:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800320c:	4637      	mov	r7, r6
 800320e:	42bb      	cmp	r3, r7
 8003210:	460e      	mov	r6, r1
 8003212:	d9f4      	bls.n	80031fe <_printf_i+0x116>
 8003214:	2b08      	cmp	r3, #8
 8003216:	d10b      	bne.n	8003230 <_printf_i+0x148>
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	07de      	lsls	r6, r3, #31
 800321c:	d508      	bpl.n	8003230 <_printf_i+0x148>
 800321e:	6923      	ldr	r3, [r4, #16]
 8003220:	6861      	ldr	r1, [r4, #4]
 8003222:	4299      	cmp	r1, r3
 8003224:	bfde      	ittt	le
 8003226:	2330      	movle	r3, #48	; 0x30
 8003228:	f805 3c01 	strble.w	r3, [r5, #-1]
 800322c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003230:	1b52      	subs	r2, r2, r5
 8003232:	6122      	str	r2, [r4, #16]
 8003234:	f8cd a000 	str.w	sl, [sp]
 8003238:	464b      	mov	r3, r9
 800323a:	aa03      	add	r2, sp, #12
 800323c:	4621      	mov	r1, r4
 800323e:	4640      	mov	r0, r8
 8003240:	f7ff fee4 	bl	800300c <_printf_common>
 8003244:	3001      	adds	r0, #1
 8003246:	d14a      	bne.n	80032de <_printf_i+0x1f6>
 8003248:	f04f 30ff 	mov.w	r0, #4294967295
 800324c:	b004      	add	sp, #16
 800324e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	f043 0320 	orr.w	r3, r3, #32
 8003258:	6023      	str	r3, [r4, #0]
 800325a:	4833      	ldr	r0, [pc, #204]	; (8003328 <_printf_i+0x240>)
 800325c:	2778      	movs	r7, #120	; 0x78
 800325e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	6829      	ldr	r1, [r5, #0]
 8003266:	061f      	lsls	r7, r3, #24
 8003268:	f851 6b04 	ldr.w	r6, [r1], #4
 800326c:	d402      	bmi.n	8003274 <_printf_i+0x18c>
 800326e:	065f      	lsls	r7, r3, #25
 8003270:	bf48      	it	mi
 8003272:	b2b6      	uxthmi	r6, r6
 8003274:	07df      	lsls	r7, r3, #31
 8003276:	bf48      	it	mi
 8003278:	f043 0320 	orrmi.w	r3, r3, #32
 800327c:	6029      	str	r1, [r5, #0]
 800327e:	bf48      	it	mi
 8003280:	6023      	strmi	r3, [r4, #0]
 8003282:	b91e      	cbnz	r6, 800328c <_printf_i+0x1a4>
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	f023 0320 	bic.w	r3, r3, #32
 800328a:	6023      	str	r3, [r4, #0]
 800328c:	2310      	movs	r3, #16
 800328e:	e7a7      	b.n	80031e0 <_printf_i+0xf8>
 8003290:	4824      	ldr	r0, [pc, #144]	; (8003324 <_printf_i+0x23c>)
 8003292:	e7e4      	b.n	800325e <_printf_i+0x176>
 8003294:	4615      	mov	r5, r2
 8003296:	e7bd      	b.n	8003214 <_printf_i+0x12c>
 8003298:	682b      	ldr	r3, [r5, #0]
 800329a:	6826      	ldr	r6, [r4, #0]
 800329c:	6961      	ldr	r1, [r4, #20]
 800329e:	1d18      	adds	r0, r3, #4
 80032a0:	6028      	str	r0, [r5, #0]
 80032a2:	0635      	lsls	r5, r6, #24
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	d501      	bpl.n	80032ac <_printf_i+0x1c4>
 80032a8:	6019      	str	r1, [r3, #0]
 80032aa:	e002      	b.n	80032b2 <_printf_i+0x1ca>
 80032ac:	0670      	lsls	r0, r6, #25
 80032ae:	d5fb      	bpl.n	80032a8 <_printf_i+0x1c0>
 80032b0:	8019      	strh	r1, [r3, #0]
 80032b2:	2300      	movs	r3, #0
 80032b4:	6123      	str	r3, [r4, #16]
 80032b6:	4615      	mov	r5, r2
 80032b8:	e7bc      	b.n	8003234 <_printf_i+0x14c>
 80032ba:	682b      	ldr	r3, [r5, #0]
 80032bc:	1d1a      	adds	r2, r3, #4
 80032be:	602a      	str	r2, [r5, #0]
 80032c0:	681d      	ldr	r5, [r3, #0]
 80032c2:	6862      	ldr	r2, [r4, #4]
 80032c4:	2100      	movs	r1, #0
 80032c6:	4628      	mov	r0, r5
 80032c8:	f7fc ff82 	bl	80001d0 <memchr>
 80032cc:	b108      	cbz	r0, 80032d2 <_printf_i+0x1ea>
 80032ce:	1b40      	subs	r0, r0, r5
 80032d0:	6060      	str	r0, [r4, #4]
 80032d2:	6863      	ldr	r3, [r4, #4]
 80032d4:	6123      	str	r3, [r4, #16]
 80032d6:	2300      	movs	r3, #0
 80032d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032dc:	e7aa      	b.n	8003234 <_printf_i+0x14c>
 80032de:	6923      	ldr	r3, [r4, #16]
 80032e0:	462a      	mov	r2, r5
 80032e2:	4649      	mov	r1, r9
 80032e4:	4640      	mov	r0, r8
 80032e6:	47d0      	blx	sl
 80032e8:	3001      	adds	r0, #1
 80032ea:	d0ad      	beq.n	8003248 <_printf_i+0x160>
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	079b      	lsls	r3, r3, #30
 80032f0:	d413      	bmi.n	800331a <_printf_i+0x232>
 80032f2:	68e0      	ldr	r0, [r4, #12]
 80032f4:	9b03      	ldr	r3, [sp, #12]
 80032f6:	4298      	cmp	r0, r3
 80032f8:	bfb8      	it	lt
 80032fa:	4618      	movlt	r0, r3
 80032fc:	e7a6      	b.n	800324c <_printf_i+0x164>
 80032fe:	2301      	movs	r3, #1
 8003300:	4632      	mov	r2, r6
 8003302:	4649      	mov	r1, r9
 8003304:	4640      	mov	r0, r8
 8003306:	47d0      	blx	sl
 8003308:	3001      	adds	r0, #1
 800330a:	d09d      	beq.n	8003248 <_printf_i+0x160>
 800330c:	3501      	adds	r5, #1
 800330e:	68e3      	ldr	r3, [r4, #12]
 8003310:	9903      	ldr	r1, [sp, #12]
 8003312:	1a5b      	subs	r3, r3, r1
 8003314:	42ab      	cmp	r3, r5
 8003316:	dcf2      	bgt.n	80032fe <_printf_i+0x216>
 8003318:	e7eb      	b.n	80032f2 <_printf_i+0x20a>
 800331a:	2500      	movs	r5, #0
 800331c:	f104 0619 	add.w	r6, r4, #25
 8003320:	e7f5      	b.n	800330e <_printf_i+0x226>
 8003322:	bf00      	nop
 8003324:	08003451 	.word	0x08003451
 8003328:	08003462 	.word	0x08003462

0800332c <memmove>:
 800332c:	4288      	cmp	r0, r1
 800332e:	b510      	push	{r4, lr}
 8003330:	eb01 0402 	add.w	r4, r1, r2
 8003334:	d902      	bls.n	800333c <memmove+0x10>
 8003336:	4284      	cmp	r4, r0
 8003338:	4623      	mov	r3, r4
 800333a:	d807      	bhi.n	800334c <memmove+0x20>
 800333c:	1e43      	subs	r3, r0, #1
 800333e:	42a1      	cmp	r1, r4
 8003340:	d008      	beq.n	8003354 <memmove+0x28>
 8003342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003346:	f803 2f01 	strb.w	r2, [r3, #1]!
 800334a:	e7f8      	b.n	800333e <memmove+0x12>
 800334c:	4402      	add	r2, r0
 800334e:	4601      	mov	r1, r0
 8003350:	428a      	cmp	r2, r1
 8003352:	d100      	bne.n	8003356 <memmove+0x2a>
 8003354:	bd10      	pop	{r4, pc}
 8003356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800335a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800335e:	e7f7      	b.n	8003350 <memmove+0x24>

08003360 <_sbrk_r>:
 8003360:	b538      	push	{r3, r4, r5, lr}
 8003362:	4d06      	ldr	r5, [pc, #24]	; (800337c <_sbrk_r+0x1c>)
 8003364:	2300      	movs	r3, #0
 8003366:	4604      	mov	r4, r0
 8003368:	4608      	mov	r0, r1
 800336a:	602b      	str	r3, [r5, #0]
 800336c:	f7fd fb8c 	bl	8000a88 <_sbrk>
 8003370:	1c43      	adds	r3, r0, #1
 8003372:	d102      	bne.n	800337a <_sbrk_r+0x1a>
 8003374:	682b      	ldr	r3, [r5, #0]
 8003376:	b103      	cbz	r3, 800337a <_sbrk_r+0x1a>
 8003378:	6023      	str	r3, [r4, #0]
 800337a:	bd38      	pop	{r3, r4, r5, pc}
 800337c:	2000025c 	.word	0x2000025c

08003380 <memcpy>:
 8003380:	440a      	add	r2, r1
 8003382:	4291      	cmp	r1, r2
 8003384:	f100 33ff 	add.w	r3, r0, #4294967295
 8003388:	d100      	bne.n	800338c <memcpy+0xc>
 800338a:	4770      	bx	lr
 800338c:	b510      	push	{r4, lr}
 800338e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003396:	4291      	cmp	r1, r2
 8003398:	d1f9      	bne.n	800338e <memcpy+0xe>
 800339a:	bd10      	pop	{r4, pc}

0800339c <_realloc_r>:
 800339c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033a0:	4680      	mov	r8, r0
 80033a2:	4614      	mov	r4, r2
 80033a4:	460e      	mov	r6, r1
 80033a6:	b921      	cbnz	r1, 80033b2 <_realloc_r+0x16>
 80033a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033ac:	4611      	mov	r1, r2
 80033ae:	f7ff bc49 	b.w	8002c44 <_malloc_r>
 80033b2:	b92a      	cbnz	r2, 80033c0 <_realloc_r+0x24>
 80033b4:	f7ff fbda 	bl	8002b6c <_free_r>
 80033b8:	4625      	mov	r5, r4
 80033ba:	4628      	mov	r0, r5
 80033bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033c0:	f000 f81b 	bl	80033fa <_malloc_usable_size_r>
 80033c4:	4284      	cmp	r4, r0
 80033c6:	4607      	mov	r7, r0
 80033c8:	d802      	bhi.n	80033d0 <_realloc_r+0x34>
 80033ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80033ce:	d812      	bhi.n	80033f6 <_realloc_r+0x5a>
 80033d0:	4621      	mov	r1, r4
 80033d2:	4640      	mov	r0, r8
 80033d4:	f7ff fc36 	bl	8002c44 <_malloc_r>
 80033d8:	4605      	mov	r5, r0
 80033da:	2800      	cmp	r0, #0
 80033dc:	d0ed      	beq.n	80033ba <_realloc_r+0x1e>
 80033de:	42bc      	cmp	r4, r7
 80033e0:	4622      	mov	r2, r4
 80033e2:	4631      	mov	r1, r6
 80033e4:	bf28      	it	cs
 80033e6:	463a      	movcs	r2, r7
 80033e8:	f7ff ffca 	bl	8003380 <memcpy>
 80033ec:	4631      	mov	r1, r6
 80033ee:	4640      	mov	r0, r8
 80033f0:	f7ff fbbc 	bl	8002b6c <_free_r>
 80033f4:	e7e1      	b.n	80033ba <_realloc_r+0x1e>
 80033f6:	4635      	mov	r5, r6
 80033f8:	e7df      	b.n	80033ba <_realloc_r+0x1e>

080033fa <_malloc_usable_size_r>:
 80033fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033fe:	1f18      	subs	r0, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	bfbc      	itt	lt
 8003404:	580b      	ldrlt	r3, [r1, r0]
 8003406:	18c0      	addlt	r0, r0, r3
 8003408:	4770      	bx	lr
	...

0800340c <_init>:
 800340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340e:	bf00      	nop
 8003410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003412:	bc08      	pop	{r3}
 8003414:	469e      	mov	lr, r3
 8003416:	4770      	bx	lr

08003418 <_fini>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	bf00      	nop
 800341c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341e:	bc08      	pop	{r3}
 8003420:	469e      	mov	lr, r3
 8003422:	4770      	bx	lr
